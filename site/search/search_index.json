{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TYMaterials","text":"<p>Get Third Year Notes, Question Bank Solutions, etc for GHRCEM Pune.</p>"},{"location":"#subjects","title":"Subjects","text":"<ul> <li>Software Engineering &amp; Project Management</li> <li>Web Development</li> <li>Database Management System</li> <li>Compiler Design</li> <li>Engineering Economics &amp; Industrial Management</li> </ul>"},{"location":"#about","title":"About","text":"<p>This project is just a reference from multiple educational sites geared towards syllabus from GHRCEM.  The Website has Notes, Question Bank Solutions, Lab Manuals, Teacher's digital notes from Classroom, etc. The notes are created/extracted :skull: from sites such as geeksforgeeks, javatpoint, tutorialspoint, etc.</p> <p>Created by Gautam Patil</p>"},{"location":"#more-projects","title":"More Projects","text":"<ul> <li>FYMaterials</li> <li>LofiPomo</li> <li>EBikeStore</li> <li>ShortStories</li> </ul>"},{"location":"sepm/","title":"SEPM","text":"<p>lol</p>"},{"location":"WD/","title":"Web Development","text":""},{"location":"WD/#syllabus","title":"Syllabus","text":"Unit Topic Hours Unit I Web Design Principles 8 - Basic principles involved in developing a web site - Planning process - Designing navigation bar - Page design - Home Page Layout Design Concept - Brief History of Internet - What is World Wide Web - Why create a web site - Web Standards Unit II Introduction to HTML 8 - What is HTML - HTML Documents - Basic structure of an HTML document - Creating an HTML document - Mark up Tags - Heading-Paragraphs - Line Breaks - HTML Tags Unit III Elements of HTML 8 - Introduction to elements of HTML - Working with Text - Working with Lists - Tables and Frames - Working with Hyperlinks - Images and Multimedia - Working with Forms and controls Unit IV Introduction to Cascading Style Sheets &amp; JavaScript 8 - Concept of CSS - Creating Style Sheet - CSS Properties - CSS Styling (Background, Text Format, Controlling Fonts) - Working with block elements and objects - Working with Lists and Tables - CSS Id and Class - Box Model - Advanced CSS - JAVA Script Introduction - Application - Advantages - Popup Boxes - Programming details - Class &amp; object Unit V Introduction to Web Publishing or Hosting 8 - Creating the Web Site - Saving the site - Working on the web site - Creating web site structure - Creating Titles for web pages - Themes - Publishing web sites"},{"location":"WD/Unit3/","title":"Elements of HTML","text":"<ul> <li>Introduction to elements of HTML</li> <li>Working with Text</li> <li>Working with Lists</li> <li>Tables and Frames</li> <li>Working with Hyperlinks</li> <li>Images and Multimedia</li> <li>Working with Forms and controls</li> </ul>"},{"location":"WD/Unit3/#introduction-to-html-elements","title":"Introduction to HTML Elements","text":"<p>HTML, which stands for Hypertext Markup Language, serves as the fundamental building block of the World Wide Web. It is a markup language that web developers use to structure the content of web pages. At its core, HTML consists of a series of elements, each designed for a specific purpose. In this comprehensive guide, we will explore the essential concepts and elements that make up HTML.</p> <p>HTML Elements Defined</p> <p>HTML elements are the basic units of structure in an HTML document. They consist of tags, attributes, and content. Tags are enclosed in angle brackets and define the beginning and end of an element. Content is the data contained within the element, and attributes provide additional information about the element.</p> <p>Here is a breakdown of the basic structure of an HTML element:</p> <ul> <li>Opening Tag: The opening tag marks the beginning of the element and contains the element name. For example, <code>&lt;p&gt;</code> is the opening tag for a paragraph element.</li> <li>Attributes: Some elements have attributes that provide extra information about the element. Attributes appear within the opening tag and are written as name-value pairs. An example is the <code>href</code> attribute in an anchor (<code>&lt;a&gt;</code>) element, which specifies the hyperlink destination.</li> <li>Content: The content is the actual data or text that the element contains. For instance, within a <code>&lt;p&gt;</code> element, you place the text or content of the paragraph.</li> <li>Closing Tag: The closing tag marks the end of the element and is similar to the opening tag, but with a forward slash (<code>/</code>) before the element name. For example, <code>&lt;/p&gt;</code> is the closing tag for a paragraph.</li> </ul> <p>Here's an example of a complete HTML element that defines a link:</p> <p><code>&lt;a href=\"https://www.example.com\"&gt;Visit Example&lt;/a&gt;</code></p> <p>In this example:</p> <ul> <li><code>&lt;a&gt;</code> is the opening tag.</li> <li><code>href=\"https://www.example.com\"</code> is an attribute that specifies the link's destination.</li> <li><code>Visit Example</code> is the content of the link.</li> <li><code>&lt;/a&gt;</code> is the closing tag.</li> </ul> <p>The Document Structure</p> <p>HTML documents are hierarchical in nature and have a specific structure. At the top level, you have the entire HTML document enclosed within <code>&lt;html&gt;</code> tags. Inside the HTML document, there are two main sections: the <code>&lt;head&gt;</code> and the <code>&lt;body&gt;</code>.</p> <ol> <li>Head Section: The <code>&lt;head&gt;</code> section contains metadata about the document, such as the title of the page, character encoding, and links to external resources like CSS stylesheets or JavaScript files. It doesn't display visible content on the web page.</li> </ol> <p><code>&lt;head&gt;         &lt;title&gt;My Web Page&lt;/title&gt;         &lt;meta charset=\"UTF-8\"&gt;         &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;     &lt;/head&gt;</code></p> <ul> <li>Body Section: The <code>&lt;body&gt;</code> section contains the visible content of the web page, including text, images, links, and other elements.</li> </ul> <p><code>&lt;body&gt;         &lt;h1&gt;Welcome to My Web Page&lt;/h1&gt;         &lt;p&gt;This is a sample paragraph.&lt;/p&gt;         &lt;img src=\"image.jpg\" alt=\"An image\"&gt;         &lt;a href=\"https://www.example.com\"&gt;Visit Example&lt;/a&gt;     &lt;/body&gt;</code></p> <p>By combining various HTML elements within the <code>&lt;body&gt;</code> section, you can create rich and structured web content.</p> <p>Semantic HTML Elements</p> <p>HTML offers a wide range of elements designed to convey meaning and structure to your web documents. Semantic HTML elements go beyond simple formatting and provide context to the content they enclose. Some common semantic elements include:</p> <ul> <li><code>&lt;header&gt;</code>: Represents a container for introductory content, often containing logos, headings, and navigation menus.</li> <li><code>&lt;nav&gt;</code>: Defines a navigation menu, typically used for site navigation links.</li> <li><code>&lt;section&gt;</code>: Represents a thematic grouping of content, such as a chapter, tabbed content, or a news article.</li> <li><code>&lt;article&gt;</code>: Encloses a self-contained composition, such as a blog post or news story.</li> <li><code>&lt;aside&gt;</code>: Contains content that is tangentially related to the content around it, like a sidebar or advertising.</li> <li><code>&lt;footer&gt;</code>: Represents a container for the footer of a section or a page, often containing copyright information, contact details, or related links.</li> </ul> <p>Using semantic elements not only improves accessibility for users with disabilities but also helps search engines better understand and index your content.</p>"},{"location":"WD/Unit3/#working-with-text","title":"Working with Text","text":"<p>Working with text is a fundamental aspect of web development, and HTML provides a variety of elements and tags to help structure and present textual content on webpages. This article will delve into the nuances of working with text in HTML, including headings, paragraphs, inline text formatting, and more.</p> <p>Headings (h1 to h6)</p> <p>HTML offers six levels of headings, ranging from <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>, to create a hierarchical structure for your content. These headings define the importance and organization of text on a webpage, with <code>&lt;h1&gt;</code> being the most significant and <code>&lt;h6&gt;</code> the least. Headings are essential for accessibility, SEO (Search Engine Optimization), and overall content organization.</p> <p>Here's an example of how to use headings:</p> <pre><code>&lt;h1&gt;Main Heading&lt;/h1&gt;\n&lt;h2&gt;Subheading&lt;/h2&gt;\n&lt;h3&gt;Sub-subheading&lt;/h3&gt;`\n</code></pre> <p>By using headings appropriately, you provide clear and meaningful structure to your content, making it easier for both users and search engines to understand the hierarchy of information.</p> <p>Paragraphs (p)</p> <p>The <code>&lt;p&gt;</code> element is used to create paragraphs of text. It is one of the most commonly used HTML tags for organizing textual content. Paragraphs provide visual separation and improve readability.</p> <p>Example:</p> <p>html</p> <p><code>&lt;p&gt;This is a paragraph of text. It can contain multiple sentences and spans several lines.&lt;/p&gt;</code></p> <p>Paragraphs are block-level elements, which means they create a new block of content, pushing subsequent elements to a new line. They are especially useful for structuring long-form text, such as articles or blog posts.</p> <p>Inline Text Formatting (Bold and Italic)</p> <p>HTML allows you to format text inline using elements like <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code>.</p> <ul> <li><code>&lt;strong&gt;</code>: The <code>&lt;strong&gt;</code> element is used to indicate strong importance or emphasis. By default, browsers typically render <code>&lt;strong&gt;</code> text as bold.</li> </ul> <p>Example:</p> <p><code>&lt;p&gt;This is &lt;strong&gt;important&lt;/strong&gt; information.&lt;/p&gt;</code></p> <ul> <li><code>&lt;em&gt;</code>: The <code>&lt;em&gt;</code> element is used to emphasize text, often rendered as italic by browsers.</li> </ul> <p>Example:</p> <p><code>&lt;p&gt;This text is &lt;em&gt;emphasized&lt;/em&gt;.&lt;/p&gt;</code></p> <p>These inline formatting elements provide a way to highlight specific words or phrases within a paragraph or heading, enhancing the readability and visual appeal of your content.</p> <p>Text Alignment</p> <p>You can control the alignment of text within HTML elements using CSS styles. Common text alignment options include left-align, right-align, center, and justified alignment.</p> <p>Example using CSS:</p> <p><code>&lt;p style=\"text-align: center;\"&gt;This text is centered.&lt;/p&gt;</code></p> <p>By adjusting the text alignment, you can create visually appealing layouts for your content, improving the overall design of your webpage.</p> <p>Text Indentation</p> <p>HTML/CSS also allows you to control text indentation, which can be helpful for creating structured and visually appealing content. You can use the <code>text-indent</code> property in CSS to specify the amount of indentation.</p> <p>Example:</p> <p><code>&lt;p style=\"text-indent: 30px;\"&gt;This paragraph has an indentation of 30 pixels.&lt;/p&gt;</code></p> <p>Indentation can be useful for creating lists, quotes, or other content elements where a hierarchical structure is needed.</p> <p>Text Transform</p> <p>The <code>text-transform</code> property in CSS allows you to control the capitalization of text. It can be used to make text uppercase, lowercase, or capitalize the first letter of each word.</p> <p>Example:</p> <p><code>&lt;p style=\"text-transform: uppercase;\"&gt;This text is in uppercase.&lt;/p&gt;     &lt;p style=\"text-transform: lowercase;\"&gt;This text is in lowercase.&lt;/p&gt;     &lt;p style=\"text-transform: capitalize;\"&gt;This text is capitalized.&lt;/p&gt;</code></p> <p>Text transformation can be particularly useful for headings, labels, and navigation menus, where consistent text formatting is essential.</p> <p>Text Decoration</p> <p>HTML/CSS provides options for text decoration, allowing you to add underlines, overlines, and strikethroughs to text.</p> <p>Example: <code>&lt;p style=\"text-decoration: underline;\"&gt;This text has an underline.&lt;/p&gt;     &lt;p style=\"text-decoration: overline;\"&gt;This text has an overline.&lt;/p&gt;     &lt;p style=\"text-decoration: line-through;\"&gt;This text has a strikethrough.&lt;/p&gt;</code></p> <p>Text decoration is often used to indicate links, emphasize specific content, or add visual cues to text.</p> <p>Text Color</p> <p>You can change the color of text using CSS. The <code>color</code> property allows you to specify a color using various formats, such as color names, hexadecimal codes, or RGB values.</p> <p>Example:</p> <pre><code>&lt;p style=\"color: #ff0000;\"&gt;This text is red.&lt;/p&gt;\n&lt;p style=\"color: blue;\"&gt;This text is blue.&lt;/p&gt;`\n</code></pre> <p>Customizing text colors enables you to create visually appealing designs and ensure that your content aligns with your website's color scheme.</p>"},{"location":"WD/Unit3/#working-with-lists","title":"Working with Lists","text":"<p>HTML provides powerful tools for structuring content on webpages, and one of the fundamental ways to organize information is by using lists. Lists help present data in a structured and readable format. In HTML, you can work with two main types of lists: ordered lists (OL) and unordered lists (UL). In this detailed exploration, we will delve into working with lists in HTML, covering their syntax, attributes, and practical examples.</p>"},{"location":"WD/Unit3/#ordered-lists-ol","title":"Ordered Lists (OL)","text":"<p>An ordered list, often referred to as OL in HTML, is used when you want to present items in a specific sequence or order. These lists are typically numbered, making it easy for readers to follow the content.</p>"},{"location":"WD/Unit3/#syntax","title":"Syntax","text":"<p>To create an ordered list in HTML, you use the following structure:</p> <p>html</p> <pre><code>`&lt;ol&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ol&gt;`\n</code></pre> <ul> <li><code>&lt;ol&gt;</code>: This is the opening tag for the ordered list.</li> <li><code>&lt;li&gt;</code>: This is the list item tag, and you place each individual item within these tags.</li> </ul>"},{"location":"WD/Unit3/#example","title":"Example","text":"<p>Let's say you're creating a recipe webpage, and you want to list the ingredients in order:</p> <p>html</p> <pre><code>`&lt;h2&gt;Ingredients:&lt;/h2&gt;\n&lt;ol&gt;\n  &lt;li&gt;1 cup flour&lt;/li&gt;\n  &lt;li&gt;1/2 cup sugar&lt;/li&gt;\n  &lt;li&gt;1 tsp salt&lt;/li&gt;\n  &lt;li&gt;2 eggs&lt;/li&gt;\n  &lt;li&gt;1 cup milk&lt;/li&gt;\n&lt;/ol&gt;`\n</code></pre> <p>In this example, the ordered list (<code>&lt;ol&gt;</code>) is used to display the ingredients, and each ingredient is a list item (<code>&lt;li&gt;</code>).</p>"},{"location":"WD/Unit3/#unordered-lists-ul","title":"Unordered Lists (UL)","text":"<p>Unordered lists, often referred to as UL in HTML, are employed when you want to present items in no particular order or sequence. These lists are typically displayed with bullet points or other markers.</p>"},{"location":"WD/Unit3/#syntax_1","title":"Syntax","text":"<p>To create an unordered list in HTML, you use the following structure:</p> <pre><code>&lt;ul&gt;\n  &lt;li&gt;Item A&lt;/li&gt;\n  &lt;li&gt;Item B&lt;/li&gt;\n  &lt;li&gt;Item C&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <ul> <li><code>&lt;ul&gt;</code>: This is the opening tag for the unordered list.</li> <li><code>&lt;li&gt;</code>: Just like with ordered lists, this is the list item tag where each item is placed.</li> </ul>"},{"location":"WD/Unit3/#example_1","title":"Example","text":"<p>Imagine you're creating a travel blog and want to list the places you've visited:</p> <p>html</p> <pre><code>`&lt;h2&gt;Places I've Visited:&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li&gt;Paris, France&lt;/li&gt;\n  &lt;li&gt;Tokyo, Japan&lt;/li&gt;\n  &lt;li&gt;New York City, USA&lt;/li&gt;\n  &lt;li&gt;Rome, Italy&lt;/li&gt;\n  &lt;li&gt;Sydney, Australia&lt;/li&gt;\n&lt;/ul&gt;`\n</code></pre> <p>In this case, the unordered list (<code>&lt;ul&gt;</code>) is used to display the places visited, and each place is listed as a list item (<code>&lt;li&gt;</code>).</p>"},{"location":"WD/Unit3/#attributes","title":"Attributes","text":"<p>Both ordered and unordered lists can have additional attributes to enhance their functionality and appearance:</p> <ul> <li> <p><code>start</code>: This attribute, when applied to an ordered list (<code>&lt;ol&gt;</code>), allows you to specify the starting number for the list.</p> </li> <li> <p><code>&lt;ol start=\"5\"&gt;</code> <code>&lt;li&gt;Item 5&lt;/li&gt;</code> <code>&lt;li&gt;Item 6&lt;/li&gt;</code> <code>&lt;li&gt;Item 7&lt;/li&gt;</code> <code>&lt;/ol&gt;</code></p> </li> <li><code>type</code>: For ordered lists (<code>&lt;ol&gt;</code>), this attribute lets you define the type of numbering or bullet point style. Common values include \"1\" (default, Arabic numerals), \"A\" (uppercase letters), \"a\" (lowercase letters), \"I\" (uppercase Roman numerals), and \"i\" (lowercase Roman numerals).</li> </ul> <p><code>&lt;ol type=\"A\"&gt;</code> <code>&lt;li&gt;Item A&lt;/li&gt;</code> <code>&lt;li&gt;Item B&lt;/li&gt;</code> <code>&lt;li&gt;Item C&lt;/li&gt;</code> <code>&lt;/ol&gt;</code></p> <ul> <li><code>reversed</code>: When applied to an ordered list (<code>&lt;ol&gt;</code>), this attribute reverses the numbering.</li> </ul> <p><code>&lt;ol reversed&gt;</code> <code>&lt;li&gt;Item 3&lt;/li&gt;</code> <code>&lt;li&gt;Item 2&lt;/li&gt;</code> <code>&lt;li&gt;Item 1&lt;/li&gt;</code> <code>&lt;/ol&gt;</code></p> <ul> <li><code>compact</code>: This attribute, which can be applied to an unordered list (<code>&lt;ul&gt;</code>), reduces the spacing between list items.</li> </ul> <p><code>&lt;ul compact&gt;</code></p> <pre><code>  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n</code></pre> <p><code>&lt;/ul&gt;</code> Output:-</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul>"},{"location":"WD/Unit3/#nesting-lists","title":"Nesting Lists","text":"<p>HTML allows you to nest lists within lists, providing a flexible way to structure content. For instance, you can have an ordered list inside an unordered list or vice versa.</p>"},{"location":"WD/Unit3/#example_2","title":"Example","text":"<p>Imagine you're creating a tutorial with subtopics and want to use nested lists: <code>&lt;h2&gt;HTML Basics&lt;/h2&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;Introduction to HTML&lt;/li&gt;</code> <code>&lt;li&gt;HTML Elements</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;Headings&lt;/li&gt;</code> <code>&lt;li&gt;Paragraphs&lt;/li&gt;</code> <code>&lt;li&gt;Lists</code> <code>&lt;ol&gt;</code> <code>&lt;li&gt;Ordered Lists&lt;/li&gt;</code> <code>&lt;li&gt;Unordered Lists&lt;/li&gt;</code> <code>&lt;/ol&gt;</code> <code>&lt;/li&gt;</code> <code>&lt;li&gt;Links&lt;/li&gt;</code> <code>&lt;/ul&gt;</code> <code>&lt;/li&gt;</code> <code>&lt;li&gt;HTML Attributes&lt;/li&gt;</code> <code>&lt;/ul&gt;</code> Output:- `HTML Basics</p> <ul> <li>Introduction to HTML</li> <li>HTML Elements     <ul> <li>Headings</li> <li>Paragraphs</li> <li>Lists         <ol> <li>Ordered Lists</li> <li>Unordered Lists</li> </ol> </li> <li>Links</li> </ul> </li> <li>HTML Attributes</li> </ul> <p>`</p> <p>In this example, the outer list is an unordered list, and within it, there's a nested ordered list and another unordered list.</p>"},{"location":"WD/Unit3/#customizing-list-styles-with-css","title":"Customizing List Styles with CSS","text":"<p>While HTML provides the structure for lists, CSS (Cascading Style Sheets) allows you to customize their appearance. You can change the bullet point style, adjust spacing, and apply various visual effects.</p>"},{"location":"WD/Unit3/#example_3","title":"Example","text":"<p>Suppose you want to change the bullet point style of an unordered list and add some spacing:</p> <pre><code>&lt;style&gt; ul.custom-list {\nlist-style-type: square; /* Change bullet point style to square */\nmargin-left: 20px; /* Add left margin for spacing */\n  } &lt;/style&gt;\n\n&lt;ul class=\"custom-list\"&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;`\n</code></pre> <p>Output:</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> <p>List item</p> <p>In this case, a <code>style</code> block with CSS is used to customize the list. The class <code>\"custom-list\"</code> is added to the unordered list to apply these styles.</p>"},{"location":"WD/Unit3/#tables-and-frames","title":"Tables and Frames","text":"<p>Tables are a fundamental HTML element used to organize and display data in rows and columns. They provide a structured way to present information, making it easier for users to understand and interpret data. Tables are created using a combination of elements, primarily <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;th&gt;</code>, and <code>&lt;td&gt;</code>.</p>"},{"location":"WD/Unit3/#the-table-element","title":"The <code>&lt;table&gt;</code> Element","text":"<p>The <code>&lt;table&gt;</code> element is the container for the entire table. It's used to define the beginning and end of the table structure. Here's an example of how to create a simple table using HTML:</p> <pre><code>&lt;table&gt;\n  &lt;!-- Table rows and cells go here --&gt;\n&lt;/table&gt;`\n</code></pre>"},{"location":"WD/Unit3/#table-rows-tr-and-header-cells-th","title":"Table Rows (<code>&lt;tr&gt;</code>) and Header Cells (<code>&lt;th&gt;</code>)","text":"<p>Inside the <code>&lt;table&gt;</code> element, you define rows using the <code>&lt;tr&gt;</code> (table row) element. Each row contains cells, which can either be standard data cells or header cells. Header cells are represented using the <code>&lt;th&gt;</code> (table header) element and are typically used to label columns or provide additional context to the data. Here's an example:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n&lt;th&gt;Name&lt;/th&gt;\n&lt;th&gt;Age&lt;/th&gt;\n&lt;th&gt;City&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n&lt;td&gt;John&lt;/td&gt;\n&lt;td&gt;30&lt;/td&gt;\n&lt;td&gt;New York&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n&lt;td&gt;Alice&lt;/td&gt;\n&lt;td&gt;25&lt;/td&gt;\n&lt;td&gt;Los Angeles&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;`\n</code></pre> <p>In this example, the first row contains header cells, and subsequent rows contain data cells. The <code>&lt;th&gt;</code> elements make the header cells bold and centered by default, helping users distinguish them from regular data cells.</p>"},{"location":"WD/Unit3/#table-data-cells-td","title":"Table Data Cells (<code>&lt;td&gt;</code>)","text":"<p>The <code>&lt;td&gt;</code> element represents standard data cells within the table. Each <code>&lt;td&gt;</code> element contains the actual data that you want to display in the table. Here's an example of data cells within a table:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n&lt;th&gt;Name&lt;/th&gt;\n&lt;th&gt;Age&lt;/th&gt;\n&lt;th&gt;City&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n&lt;td&gt;John&lt;/td&gt;\n&lt;td&gt;30&lt;/td&gt;\n&lt;td&gt;New York&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n&lt;td&gt;Alice&lt;/td&gt;\n&lt;td&gt;25&lt;/td&gt;\n&lt;td&gt;Los Angeles&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"WD/Unit3/#attributes-for-tables","title":"Attributes for Tables","text":"<p>HTML provides attributes that allow you to customize the appearance and behavior of tables:</p> <ul> <li> <p><code>border</code>: Specifies the border width around the table. For example, <code>border=\"1\"</code> adds a border with a width of 1 pixel.</p> </li> <li> <p><code>&lt;table border=\"1\"&gt;</code> <code>&lt;!-- Table content --&gt;</code> <code>&lt;/table&gt;</code></p> </li> <li><code>width</code>: Sets the width of the table. You can specify the width in pixels or as a percentage of the available space.</li> <li><code>&lt;table width=\"50%\"&gt;</code> <code>&lt;!-- Table content --&gt;</code> <code>&lt;/table&gt;</code></li> <li><code>cellspacing</code> and <code>cellpadding</code>: These attributes control the spacing between cells (<code>cellspacing</code>) and the padding inside cells (<code>cellpadding</code>).</li> </ul> <p><code>&lt;table cellspacing=\"5\" cellpadding=\"10\"&gt;</code> <code>&lt;!-- Table content --&gt;</code> <code>&lt;/table&gt;</code></p> <ul> <li><code>colspan</code> and <code>rowspan</code>: These attributes allow cells to span multiple columns or rows, useful for merging cells.</li> </ul> <p><code>&lt;table&gt;</code> <code>&lt;tr&gt;</code> <code>&lt;td colspan=\"2\"&gt;Merged Cell&lt;/td&gt;</code> <code>&lt;/tr&gt;</code> <code>&lt;tr&gt;</code> <code>&lt;td&gt;Cell 1&lt;/td&gt;</code> <code>&lt;td&gt;Cell 2&lt;/td&gt;</code> <code>&lt;/tr&gt;</code> <code>&lt;/table&gt;</code></p>"},{"location":"WD/Unit3/#frames-in-html-deprecated","title":"Frames in HTML (Deprecated)","text":"<p>Frames were once a feature in HTML used to divide a webpage into multiple sections or frames, each with its own separate HTML document. Frames allowed developers to create layouts with independent scrolling regions. However, frames have become deprecated in modern web development due to various limitations and usability concerns.</p>"},{"location":"WD/Unit3/#frame-elements-deprecated","title":"Frame Elements (Deprecated)","text":"<p>Frames were implemented using the following HTML elements:</p> <ul> <li><code>&lt;frameset&gt;</code>: The <code>&lt;frameset&gt;</code> element defined the layout and structure of frames within a webpage.</li> <li><code>&lt;frame&gt;</code>: The <code>&lt;frame&gt;</code> element was used to create individual frames within the frameset. Each <code>&lt;frame&gt;</code> referenced a separate HTML document.</li> <li><code>&lt;iframe&gt;</code>: The <code>&lt;iframe&gt;</code> element allowed the embedding of one webpage within another. Unlike <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code> is still widely used for embedding content such as maps and videos but not for creating entire page layouts.</li> </ul>"},{"location":"WD/Unit3/#why-frames-are-deprecated","title":"Why Frames are Deprecated","text":"<p>Frames had several drawbacks, which led to their deprecation:</p> <ol> <li>Usability: Frames complicated navigation and made it challenging for users to bookmark or share specific pages within a frame-based layout.</li> <li>SEO: Search engines had difficulty indexing content within frames, affecting the visibility of websites in search results.</li> <li>Accessibility: Frames could cause accessibility issues for users with disabilities, as screen readers might struggle to interpret the content within frames.</li> <li>Mobile Devices: Frames were not well-suited for responsive design and mobile devices.</li> </ol> <p>Due to these issues, frames have been replaced by more flexible and user-friendly layout techniques using CSS, such as flexbox and grid, along with modern HTML5 structural elements like <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, and <code>&lt;footer&gt;</code>.</p>"},{"location":"WD/Unit3/#working-with-hyperlinks","title":"Working with Hyperlinks","text":"<p>Hyperlinks, often referred to as links, are fundamental elements in HTML that allow you to navigate between different web pages and resources on the internet. They are an essential part of web design and are used to create a web of interconnected content. In this detailed explanation, we will explore how to work with hyperlinks in HTML, including different types of links, link attributes, and best practices.</p>"},{"location":"WD/Unit3/#basic-hyperlinks","title":"Basic Hyperlinks","text":"<p>To create a basic hyperlink in HTML, you use the <code>&lt;a&gt;</code> (anchor) element. Here's the basic syntax:</p> <p>html</p> <p><code>&lt;a href=\"URL\"&gt;Link Text&lt;/a&gt;</code></p> <ul> <li><code>&lt;a&gt;</code>: This is the anchor element used to create a hyperlink.</li> <li><code>href</code>: This is the attribute that specifies the URL (Uniform Resource Locator) to which the link points.</li> <li><code>Link Text</code>: This is the visible text or content of the hyperlink that users can click.</li> </ul> <p>For example, let's create a simple link to the OpenAI website:</p> <p>html</p> <p><code>&lt;a href=\"https://www.openai.com/\"&gt;Visit OpenAI&lt;/a&gt;</code></p> <p>When rendered in a web browser, this HTML code will display \"Visit OpenAI\" as a clickable link. Clicking on it will take the user to the OpenAI website.</p>"},{"location":"WD/Unit3/#relative-and-absolute-urls","title":"Relative and Absolute URLs","text":"<p>Hyperlinks can point to either relative or absolute URLs. Understanding the difference between these two types of URLs is crucial when working with hyperlinks.</p> <ol> <li> <p>Relative URLs: These URLs are specified relative to the current web page's location. They are often used for links within the same website or when referencing resources located on the same server.</p> <p>Example of a relative URL:</p> <p>html</p> </li> <li> <p><code>&lt;a href=\"/about.html\"&gt;About Us&lt;/a&gt;</code></p> </li> </ol> <p>In this example, the link points to a page named \"about.html\" located at the root of the current website.</p> <ul> <li>Absolute URLs: These URLs specify the full path to a resource, including the protocol (e.g., \"http://\" or \"https://\") and the domain name. They are used when linking to external websites or resources.</li> </ul> <p>Example of an absolute URL:</p> <p>html</p> <ol> <li> <p><code>&lt;a href=\"https://www.example.com/\"&gt;Visit Example&lt;/a&gt;</code></p> <p>Here, the link points to an external website, \"https://www.example.com/.\"</p> </li> </ol>"},{"location":"WD/Unit3/#linking-to-email-addresses","title":"Linking to Email Addresses","text":"<p>You can also create hyperlinks that open the user's default email client to compose a new message. To achieve this, use the <code>mailto:</code> scheme in the <code>href</code> attribute, followed by the email address.</p> <p>html</p> <p><code>&lt;a href=\"mailto:info@example.com\"&gt;Send an Email&lt;/a&gt;</code></p> <p>Clicking on this link will open the user's email client with the recipient's address pre-filled as \"info@example.com.\"</p>"},{"location":"WD/Unit3/#linking-to-files","title":"Linking to Files","text":"<p>In addition to web pages and email addresses, hyperlinks can also point to files, such as PDF documents, images, or downloadable files. When linking to files, it's essential to specify the correct file path in the <code>href</code> attribute.</p> <p>html</p> <p><code>&lt;a href=\"documents/mydocument.pdf\"&gt;Download PDF&lt;/a&gt;</code></p> <p>In this example, the link points to a PDF file named \"mydocument.pdf\" located in a subdirectory called \"documents.\"</p>"},{"location":"WD/Unit3/#link-attributes","title":"Link Attributes","text":"<p>HTML provides several attributes that you can use to enhance the behavior and appearance of hyperlinks.</p> <ol> <li> <p>Title Attribute: The <code>title</code> attribute allows you to provide additional information about the link. When users hover their cursor over the link, the text specified in the <code>title</code> attribute will be displayed as a tooltip.</p> <p>html</p> </li> <li> <p><code>&lt;a href=\"https://www.example.com/\" title=\"Visit Example\"&gt;Example Website&lt;/a&gt;</code></p> </li> <li>Target Attribute: The <code>target</code> attribute specifies where the linked document should be displayed. Common values for the <code>target</code> attribute include <code>_blank</code> (opens the link in a new tab or window) and <code>_self</code> (opens the link in the same tab or window).</li> </ol> <p>html</p> <ul> <li><code>&lt;a href=\"https://www.example.com/\" target=\"_blank\"&gt;Open in New Tab&lt;/a&gt;</code></li> <li>Rel Attribute: The <code>rel</code> attribute is used to specify the relationship between the current document and the linked document. It is often used in conjunction with CSS to style links differently based on their relationships.</li> </ul> <p>html</p> <ul> <li><code>&lt;a href=\"https://www.example.com/\" rel=\"nofollow\"&gt;Visit Example&lt;/a&gt;</code></li> <li>Download Attribute: The <code>download</code> attribute, when used on links to downloadable files, prompts the user to download the linked file rather than navigating to it.</li> </ul> <p>html</p> <ol> <li><code>&lt;a href=\"documents/mydocument.pdf\" download&gt;Download PDF&lt;/a&gt;</code></li> </ol>"},{"location":"WD/Unit3/#images-and-multimedia","title":"Images and Multimedia","text":"<p>Images and multimedia elements are essential for enhancing the visual appeal and interactivity of web pages. In HTML, you can include images, audio, and video content using specific elements and attributes. Let's explore these elements and how to work with them.</p>"},{"location":"WD/Unit3/#image-elements","title":"Image Elements","text":"<p>To display images on a web page, you use the <code>&lt;img&gt;</code> (image) element. Here's the basic syntax for adding an image:</p> <p>html</p> <p><code>&lt;img src=\"image-source.jpg\" alt=\"Image Description\"&gt;</code></p> <ul> <li><code>&lt;img&gt;</code>: This is the image element used to embed images.</li> <li><code>src</code>: This attribute specifies the source URL of the image.</li> <li><code>alt</code>: The <code>alt</code> attribute provides alternative text that is displayed if the image cannot be loaded or for accessibility purposes.</li> </ul> <p>Example:</p> <p>html</p> <p><code>&lt;img src=\"cat.jpg\" alt=\"A cute cat\"&gt;</code></p>"},{"location":"WD/Unit3/#multimedia-elements","title":"Multimedia Elements","text":"<p>HTML provides specific elements for embedding audio and video content.</p>"},{"location":"WD/Unit3/#audio-element","title":"Audio Element","text":"<p>To add audio to your web page, you use the <code>&lt;audio&gt;</code> element. Here's a basic example:</p> <p>html</p> <p>` <p>    Your browser does not support the audio element. `</p> <ul> <li><code>&lt;audio&gt;</code>: This is the audio element.</li> <li><code>controls</code>: The <code>controls</code> attribute adds audio playback controls (play, pause, volume, etc.).</li> <li><code>&lt;source&gt;</code>: This element specifies the audio source URL and type.</li> </ul>"},{"location":"WD/Unit3/#video-element","title":"Video Element","text":"<p>To embed videos, use the <code>&lt;video&gt;</code> element:</p> <p>html</p> <p>` <p>    Your browser does not support the video element. `</p> <ul> <li><code>&lt;video&gt;</code>: This is the video element.</li> <li><code>controls</code>: The <code>controls</code> attribute adds video playback controls.</li> <li><code>width</code> and <code>height</code>: These attributes define the video's dimensions.</li> <li><code>&lt;source&gt;</code>: Specify the video source URL and type.</li> </ul>"},{"location":"WD/Unit3/#responsive-images-and-accessibility","title":"Responsive Images and Accessibility","text":"<p>When working with images and multimedia, it's important to consider responsive design and accessibility.</p> <ol> <li> <p>Responsive Images: To ensure that images adapt to different screen sizes, you can use CSS techniques such as setting the <code>max-width</code> property to a percentage value.</p> </li> <li> <p><code>img {    max-width: 100%;    height: auto; }</code></p> </li> </ol> <p>This CSS rule makes images scale down proportionally to fit their container.</p> <ul> <li>Image Accessibility: Always provide meaningful <code>alt</code> attributes for images to make your content accessible to users with disabilities. Screen readers rely on these attributes to describe</li> </ul>"},{"location":"WD/Unit4/","title":"Introduction to CSS &amp; Javascript","text":"<ul> <li>Concept of CSS</li> <li>Creating Style Sheet</li> <li>CSS Properties</li> <li>CSS Styling (Background, Text Format, Controlling Fonts)</li> <li>Working with block elements and objects</li> <li>Working with Lists and Tables</li> <li>CSS Id and Class</li> <li>Box Model</li> <li>Advanced CSS</li> <li>JavaScript Introduction</li> <li>Application</li> <li>Advantages</li> <li>Popup Boxes</li> <li>Programming details</li> <li>Class &amp; object</li> </ul>"},{"location":"WD/Unit4/#the-concept-of-css-cascading-style-sheets","title":"The Concept of CSS (Cascading Style Sheets)","text":"<p>Cascading Style Sheets, often abbreviated as CSS, are a fundamental component of web development. They play a pivotal role in controlling the presentation and visual design of web pages. CSS allows web developers to separate the structure and content of a webpage from its visual styling, providing greater flexibility, maintainability, and creativity in web design. In this comprehensive guide, we will explore the concept of CSS, its principles, syntax, and provide numerous examples to illustrate its power and versatility.</p>"},{"location":"WD/Unit4/#understanding-the-role-of-css","title":"Understanding the Role of CSS","text":"<p>CSS is a stylesheet language that describes how elements in a web document should be displayed on the screen, printed, or otherwise presented to users. It acts as a bridge between the raw content of a webpage (written in HTML) and the user's experience by defining the layout, colors, fonts, spacing, and various other aspects of the visual presentation.</p>"},{"location":"WD/Unit4/#key-concepts-of-css","title":"Key Concepts of CSS","text":"<p>Before diving into examples, let's establish some key concepts of CSS:</p> <ol> <li>Selectors: CSS selectors are used to target HTML elements that you want to style. Selectors can be based on element types, classes, IDs, attributes, and more.</li> <li>Properties: CSS properties define the specific aspects of an element that you want to style. Examples include <code>color</code>, <code>font-size</code>, <code>margin</code>, and <code>background-color</code>.</li> <li>Values: CSS properties are assigned values that determine the style. For instance, <code>color: blue;</code> sets the text color to blue.</li> <li>Declaration: A declaration consists of a property and its associated value. Multiple declarations are grouped within curly braces <code>{}</code> to form a CSS rule.</li> </ol> <p>Now, let's explore CSS through examples:</p>"},{"location":"WD/Unit4/#example-1-basic-css-rule","title":"Example 1: Basic CSS Rule","text":"<p>Suppose you have an HTML paragraph element like this:</p> <p>html</p> <p><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;</code></p> <p>You can create a basic CSS rule to style this paragraph with a red text color:</p> <p>css</p> <pre><code>p {\n  color: red;\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>p</code> is the selector targeting all <code>&lt;p&gt;</code> elements in the HTML.</li> <li><code>color</code> is the property being styled.</li> <li><code>red</code> is the value assigned to the <code>color</code> property.</li> </ul> <p>This simple CSS rule changes the text color of all paragraphs to red.</p>"},{"location":"WD/Unit4/#example-2-using-classes","title":"Example 2: Using Classes","text":"<p>CSS allows you to apply styles to specific elements using classes. Suppose you want to style a specific paragraph differently:</p> <pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;p class=\"special\"&gt;This is a special paragraph.&lt;/p&gt;`\n</code></pre> <p>In your CSS, you can define a class-based rule:</p> <pre><code>.special {\n  font-weight: bold;\n  color: blue;\n}\n</code></pre> <p>In this case:</p> <ul> <li><code>.special</code> is the class selector.</li> <li><code>font-weight</code> and <code>color</code> are properties being applied.</li> <li><code>bold</code> and <code>blue</code> are the values for those properties.</li> </ul> <p>This rule makes the paragraph with the <code>special</code> class bold and sets its text color to blue.</p>"},{"location":"WD/Unit4/#example-3-inline-css","title":"Example 3: Inline CSS","text":"<p>You can also apply CSS styles directly to individual HTML elements using the <code>style</code> attribute. Here's an example:</p> <pre><code>&lt;p style=\"font-size: 20px; background-color: yellow;\"&gt;\n    This is a styled paragraph.\n&lt;/p&gt;\n</code></pre> <p>In this example:</p> <ul> <li>The <code>style</code> attribute contains CSS rules within double quotes.</li> <li>The <code>font-size</code> and <code>background-color</code> properties are applied inline to this specific paragraph.</li> </ul> <p>Using inline CSS is less recommended for large-scale styling but can be handy for quick adjustments.</p>"},{"location":"WD/Unit4/#example-4-css-for-lists","title":"Example 4: CSS for Lists","text":"<p>Let's say you have an HTML unordered list (<code>&lt;ul&gt;</code>) with list items (<code>&lt;li&gt;</code>):</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> <p>You can use CSS to remove the default list bullet points and style the list items:</p> <pre><code>ul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  background-color: #f0f0f0;\n  margin: 5px 0;\n  padding: 10px;\n}\n</code></pre> <p>In this case:</p> <ul> <li><code>list-style-type: none;</code> removes the bullet points.</li> <li><code>padding: 0;</code> removes the default padding on the <code>&lt;ul&gt;</code> element.</li> <li><code>background-color</code>, <code>margin</code>, and <code>padding</code> properties are applied to list items, creating a uniform appearance.</li> </ul>"},{"location":"WD/Unit4/#example-5-responsive-design","title":"Example 5: Responsive Design","text":"<p>CSS is crucial for creating responsive web designs that adapt to different screen sizes and devices. Here's a simple example using CSS media queries:</p> <pre><code>/* Default styles for larger screens */\np {\n  font-size: 18px;\n  line-height: 1.5;\n}\n\n/* Media query for screens smaller than 600px wide */\n@media (max-width: 600px) {\n  p {\nfont-size: 16px;\nline-height: 1.3;\n  }\n}\n</code></pre> <p>In this example:</p> <ul> <li>Default styles are set for paragraphs.</li> <li>A media query is used to modify the styles for screens with a maximum width of 600px.</li> <li>The font size and line height are adjusted for smaller screens.</li> </ul> <p>This technique ensures that your webpage looks good and is legible on both large desktop screens and smaller mobile devices.</p>"},{"location":"WD/Unit4/#example-6-css-transitions","title":"Example 6: CSS Transitions","text":"<p>CSS enables smooth transitions and animations on elements. Suppose you want to create a simple button that changes color when hovered over:</p> <pre><code>&lt;button class=\"color-change-button\"&gt;\n    Hover Me\n&lt;/button&gt;`\n</code></pre> <p>You can achieve this effect with CSS:</p> <pre><code>.color-change-button {\n  background-color: blue;\n  color: white;\n  transition: background-color 0.3s ease;\n}\n\n.color-change-button:hover {\n  background-color: red;\n}\n</code></pre> <p>In this example:</p> <ul> <li>The <code>transition</code> property specifies the property to transition (<code>background-color</code>), duration (0.3 seconds), and easing function (ease).</li> <li>The <code>:hover</code> pseudo-class is used to apply styles when the button is hovered over.</li> </ul> <p>This creates a smooth color transition when the button is hovered.</p>"},{"location":"WD/Unit4/#example-7-css-flexbox-layout","title":"Example 7: CSS Flexbox Layout","text":"<p>CSS offers layout capabilities that simplify complex designs. Consider a basic flexbox layout:</p> <pre><code>&lt;div class=\"flex-container\"&gt;\n    &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>With CSS:</p> <p>css</p> <pre><code>.flex-container {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>display: flex;</code> defines a flex container, enabling a flex layout for its children.</li> <li><code>justify-content: space-between;</code> evenly spaces the child items within the container.</li> </ul> <p>This results in a horizontal layout with equal spacing between items.</p>"},{"location":"WD/Unit4/#creating-style-sheet","title":"Creating Style Sheet","text":"<p>Cascading Style Sheets, commonly known as CSS, are an integral part of modern web development. They allow web designers and developers to control the presentation and layout of web pages. CSS is used to define styles, such as colors, fonts, spacing, and positioning, for HTML elements. This separation of content (HTML) and presentation (CSS) is a fundamental principle of web design, making it easier to maintain and update websites. In this extensive guide, we will delve into the world of creating style sheets with CSS, providing detailed explanations and examples.</p>"},{"location":"WD/Unit4/#understanding-css","title":"Understanding CSS:","text":"<p>CSS works by selecting HTML elements and applying styles to them. These styles are defined in a separate CSS file or embedded within an HTML document using <code>&lt;style&gt;</code> tags. To create an effective style sheet, you need to understand the following concepts:</p> <ol> <li> <p>Selectors: Selectors are used to target specific HTML elements that you want to style. CSS provides various types of selectors, including element selectors, class selectors, and ID selectors. Here's an example:</p> <p>css</p> </li> <li> <p>```/ Element Selector /   p {       color: blue;   }</p> </li> </ol> <p>/ Class Selector /   .highlight {       background-color: yellow;   }</p> <p>/ ID Selector /   #header {       font-size: 24px;   }</p> <p>```</p> <ul> <li>Properties and Values: CSS properties define the aspects of an element that you want to style, such as <code>color</code>, <code>font-size</code>, <code>margin</code>, <code>padding</code>, and many others. These properties are assigned values that specify how the element should appear. For instance:</li> </ul> <p>css</p> <ol> <li>h1 {             font-family: Arial, sans-serif;             font-size: 36px;             color: #333;         }</li> <li>Cascade and Specificity: The \"C\" in CSS stands for \"Cascading,\" which means that styles can be applied from multiple sources, including external style sheets, internal (embedded) styles, and inline styles. When conflicting styles are encountered, CSS uses rules like specificity and the order of appearance to determine which style should be applied.</li> <li>Inheritance: CSS properties can be inherited from parent elements to child elements. For example, if you set a font family on the <code>body</code> element, it will apply to all the text within that body unless overridden by more specific styles.</li> </ol>"},{"location":"WD/Unit4/#creating-a-css-style-sheet","title":"Creating a CSS Style Sheet:","text":"<p>To create a CSS style sheet, you can follow these steps:</p> <ol> <li>Create a New File: Start by creating a new text file with a <code>.css</code> extension. You can use any text editor or integrated development environment (IDE) to write CSS code.</li> <li> <p>Define Selectors and Styles: Within your CSS file, define selectors and the styles you want to apply. For example:</p> </li> <li> <p>````/ Selectors and Styles /   h1 {       font-family: Arial, sans-serif;       font-size: 36px;       color: #333;   }</p> </li> </ol> <p>p {       font-family: Georgia, serif;       font-size: 18px;       line-height: 1.5;   }```</p> <p>````</p> <ul> <li> <p>Link CSS to HTML: To apply your CSS styles to an HTML document, link the CSS file in the HTML document's <code>&lt;head&gt;</code> section using the <code>&lt;link&gt;</code> element. Here's an example:</p> </li> <li> <p><code>&lt;!DOCTYPE html&gt;     &lt;html&gt;     &lt;head&gt;         &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;     &lt;/head&gt;     &lt;body&gt;         &lt;h1&gt;Welcome to My Website&lt;/h1&gt;         &lt;p&gt;This is a sample paragraph.&lt;/p&gt;     &lt;/body&gt;     &lt;/html&gt;`</code>     In this example, the <code>href</code> attribute in the <code>&lt;link&gt;</code> tag should point to the path of your CSS file.</p> </li> </ul> <p>Examples of CSS Styles:</p> <p>Let's explore some common CSS styles and how they affect the appearance of HTML elements.</p> <ol> <li> <p>Font Style:</p> </li> <li> <p>````/ Change font family and size /   body {       font-family: \"Helvetica Neue\", sans-serif;       font-size: 16px;   }</p> </li> </ol> <p>/ Make headings bold /   h1, h2, h3 {       font-weight: bold;   }```</p> <p>````</p> <ul> <li>Colors and Backgrounds:</li> </ul> <p>```/ Set text color and background color /   h1 {       color: #333;       background-color: #f0f0f0;   }</p> <pre><code>\n    /* Change link color on hover */\n    a:hover {\n        color: #007bff;\n    }\n\n- **Spacing and Layout:**\n\n</code></pre> <p>/ Add padding and margin to elements /   .container {       padding: 20px;   }</p> <p>/ Center-align text /   .center {       text-align: center;   }</p> <pre><code>\n- **Borders and Shadows:**\n\n```css\n/* Add a border to an element */\n.box {\n  border: 2px solid #ccc;\n}\n\n/* Apply box shadow */\n.card {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n</code></pre> <p>ok</p>"},{"location":"WD/Unit4/#css-properties","title":"CSS Properties","text":"<p>1. Introduction to CSS Properties:</p> <p>CSS properties are rules or directives that define how HTML elements should be displayed on a web page. These properties control elements' styling, including their colors, fonts, spacing, positioning, and more. CSS properties are essential for creating visually appealing and user-friendly websites.</p> <p>2. Syntax of CSS Properties:</p> <p>A CSS property consists of two parts: a property name and a value. The property name specifies what aspect of the element you want to style, and the value determines how that property should be applied. The property and value are separated by a colon, and each rule is terminated by a semicolon. Here's an example:</p> <pre><code>`selector {\n    property: value;\n}`\n</code></pre> <p>3. Common CSS Properties:</p> <p>Let's delve into some of the most commonly used CSS properties:</p> <ul> <li> <p>Color Properties:</p> </li> <li> <p><code>color</code>: Sets the text color.</p> </li> <li> <p><code>background-color</code>: Sets the background color of an element.</p> </li> <li> <p>Typography Properties:</p> </li> <li> <p><code>font-family</code>: Defines the font used for text.</p> </li> <li><code>font-size</code>: Sets the size of the font.</li> <li><code>font-weight</code>: Specifies the thickness of the font.</li> <li><code>text-align</code>: Aligns text within an element.</li> <li> <p><code>text-decoration</code>: Adds decoration to text (e.g., underline, overline).</p> </li> <li> <p>Layout Properties:</p> </li> <li> <p><code>width</code> and <code>height</code>: Determine the dimensions of an element.</p> </li> <li><code>margin</code> and <code>padding</code>: Control spacing around an element.</li> <li><code>display</code>: Defines how an element is displayed (e.g., block, inline).</li> <li> <p><code>position</code>: Sets the positioning method for an element (e.g., relative, absolute).</p> </li> <li> <p>Border and Box Properties:</p> </li> <li> <p><code>border</code>: Specifies the border around an element.</p> </li> <li><code>border-radius</code>: Rounds the corners of an element.</li> <li> <p><code>box-shadow</code>: Adds a shadow effect to an element's box.</p> </li> <li> <p>Background Properties:</p> </li> <li> <p><code>background-image</code>: Sets an image as the background.</p> </li> <li><code>background-repeat</code>: Defines how a background image repeats.</li> <li> <p><code>background-position</code>: Specifies the position of a background image.</p> </li> <li> <p>Transform and Transition Properties:</p> </li> <li> <p><code>transform</code>: Applies 2D or 3D transformations (e.g., rotate, scale).</p> </li> <li> <p><code>transition</code>: Adds smooth transitions to element changes (e.g., hover effects).</p> </li> <li> <p>Flexbox and Grid Properties:</p> </li> <li> <p><code>display: flex</code> and related properties create flexible layouts.</p> </li> <li> <p><code>display: grid</code> and related properties create grid-based layouts.</p> </li> <li> <p>Media Query Properties:</p> </li> <li> <p><code>@media</code>: Allows for responsive design by applying styles based on screen size.</p> </li> </ul> <p>4. Inheritance and Specificity:</p> <p>CSS properties follow the rules of inheritance and specificity:</p> <ul> <li>Inheritance: Some CSS properties are inherited by child elements from their parent elements. For example, the <code>font-family</code> property is often inherited. If a parent element defines the font family, child elements will inherit it unless explicitly overridden.</li> <li>Specificity: When multiple CSS rules apply to the same element, the specificity of the selectors determines which styles are applied. Specificity is based on the type of selector (e.g., class, ID, element) and the order of declaration in the stylesheet.</li> </ul> <p>5. CSS Selectors:</p> <p>To apply CSS properties to specific HTML elements, you use selectors. Selectors target elements based on their type, attributes, classes, IDs, or other criteria. Some common selectors include:</p> <ul> <li>Element Selector: Targets all instances of a specific HTML element (e.g., <code>p</code> for paragraphs).</li> <li>Class Selector: Targets elements with a specific class attribute (e.g., <code>.button</code>).</li> <li>ID Selector: Targets a unique element with a specific ID attribute (e.g., <code>#header</code>).</li> <li>Descendant Selector: Targets elements that are descendants of another element (e.g., <code>ul li</code>).</li> <li>Pseudo-class Selector: Targets elements based on their state (e.g., <code>:hover</code> for hover effects).</li> <li>Attribute Selector: Targets elements with specific attribute values (e.g., <code>[type=\"text\"]</code> for input fields).</li> </ul> <p>6. CSS Box Model:</p> <p>Understanding the CSS box model is crucial for layout and spacing. It consists of four parts:</p> <ul> <li>Content: The actual content of the element (e.g., text, images).</li> <li>Padding: The space between the content and the border.</li> <li>Border: The border surrounding the padding and content.</li> <li>Margin: The space outside the border, separating elements.</li> </ul> <p>You can control the dimensions of these components using CSS properties like <code>width</code>, <code>height</code>, <code>margin</code>, <code>padding</code>, and <code>border</code>.</p> <p>7. CSS Units:</p> <p>CSS properties often use different units for measurements, such as pixels (<code>px</code>), percentages (<code>%</code>), ems (<code>em</code>), and rems (<code>rem</code>). Understanding which unit to use and when is crucial for responsive design and layout control.</p> <p>8. External CSS vs. Inline CSS vs. Internal CSS:</p> <p>CSS can be applied to HTML documents in three main ways:</p> <ul> <li>External CSS: A separate CSS file linked to the HTML document.</li> <li>Inline CSS: CSS defined directly within an HTML element's <code>style</code> attribute.</li> <li>Internal CSS: CSS defined within the <code>&lt;style&gt;</code> tag in the HTML document's <code>&lt;head&gt;</code> section.</li> </ul> <p>Each method has its use cases, with external CSS being the most common for maintainability and separation of concerns.</p> <p>9. CSS Frameworks:</p> <p>CSS frameworks like Bootstrap, Foundation, and Bulma provide pre-designed CSS classes and components to streamline web development. They offer a consistent and responsive design system, reducing the need for custom CSS.</p> <p>10. CSS Preprocessors:</p> <p>CSS preprocessors like Sass and Less extend the capabilities of CSS by introducing variables, mixins, and functions. These preprocessors enhance code modularity and maintainability.</p>"},{"location":"WD/Unit4/#css-styling-background-text-format-controlling-fonts","title":"CSS Styling (Background, Text Format, Controlling Fonts)","text":"<p>Cascading Style Sheets (CSS) is a fundamental technology in web development that allows you to control the visual presentation of HTML elements. CSS styling plays a crucial role in creating visually appealing and user-friendly web pages. In this discussion, we'll explore the key elements of CSS styling, focusing on background properties, text formatting, and font control.</p>"},{"location":"WD/Unit4/#background-properties","title":"Background Properties","text":"<p>Background properties in CSS enable you to define the background appearance of HTML elements, such as divs, sections, or the entire page. These properties include:</p>"},{"location":"WD/Unit4/#1-background-color","title":"1. Background Color","text":"<p>You can set the background color of an element using the <code>background-color</code> property. For example:</p> <pre><code>`div {\n  background-color: #3498db; /* Sets the background color to a shade of blue */\n}`\n</code></pre>"},{"location":"WD/Unit4/#2-background-image","title":"2. Background Image","text":"<p>The <code>background-image</code> property allows you to use an image as the background of an element. You can specify the image URL as follows:</p> <pre><code>`body {\n  background-image: url('background-image.jpg');\n}`\n</code></pre>"},{"location":"WD/Unit4/#3-background-repeat","title":"3. Background Repeat","text":"<p>You can control how the background image repeats using the <code>background-repeat</code> property. Options include <code>repeat</code>, <code>no-repeat</code>, <code>repeat-x</code>, and <code>repeat-y</code>.</p> <pre><code>`section {\n  background-image: url('pattern.png');\n  background-repeat: repeat-x; /* Repeats the image horizontally */\n}`\n</code></pre>"},{"location":"WD/Unit4/#4-background-position","title":"4. Background Position","text":"<p>The <code>background-position</code> property defines the starting position of the background image within the element.</p> <pre><code>`header {\n  background-image: url('header-bg.jpg');\n  background-position: center top; /* Positions the image at the center top of the header */\n}`\n</code></pre>"},{"location":"WD/Unit4/#5-background-attachment","title":"5. Background Attachment","text":"<p>The <code>background-attachment</code> property determines whether the background image scrolls with the content or remains fixed as the user scrolls.</p> <pre><code>`body {\n  background-image: url('background.jpg');\n  background-attachment: fixed; /* Background stays fixed while scrolling */\n}`\n</code></pre>"},{"location":"WD/Unit4/#text-formatting","title":"Text Formatting","text":"<p>CSS provides extensive capabilities for formatting text within HTML elements. Let's explore some key text formatting properties:</p>"},{"location":"WD/Unit4/#1-font-size","title":"1. Font Size","text":"<p>You can control the size of text using the <code>font-size</code> property. You can specify sizes in various units like pixels, ems, or percentages.</p> <pre><code>`p {\n  font-size: 18px; /* Sets the font size to 18 pixels */\n}`\n</code></pre>"},{"location":"WD/Unit4/#2-font-style","title":"2. Font Style","text":"<p>The <code>font-style</code> property allows you to italicize text if desired.</p> <pre><code>`em {\n  font-style: italic; /* Makes the text italic */\n}`\n</code></pre>"},{"location":"WD/Unit4/#3-font-weight","title":"3. Font Weight","text":"<p>The <code>font-weight</code> property defines the thickness of the text, allowing you to create bold or normal text.</p> <pre><code>`strong {\n  font-weight: bold; /* Makes the text bold */\n}`\n</code></pre>"},{"location":"WD/Unit4/#4-text-color","title":"4. Text Color","text":"<p>To change the color of text, use the <code>color</code> property.</p> <pre><code>`h1 {\n  color: #e74c3c; /* Sets the text color to a shade of red */\n}`\n</code></pre>"},{"location":"WD/Unit4/#5-text-alignment","title":"5. Text Alignment","text":"<p>The <code>text-align</code> property controls the horizontal alignment of text within an element.</p> <pre><code>`div {\n  text-align: center; /* Centers the text within the div */\n}`\n</code></pre>"},{"location":"WD/Unit4/#6-text-decoration","title":"6. Text Decoration","text":"<p>You can add underlines or strike-throughs to text using the <code>text-decoration</code> property.</p> <pre><code>`a {\n  text-decoration: underline; /* Adds underlines to links */\n}`\n</code></pre>"},{"location":"WD/Unit4/#controlling-fonts","title":"Controlling Fonts","text":"<p>CSS provides several properties to manage the choice and presentation of fonts on your web page. These properties include:</p>"},{"location":"WD/Unit4/#1-font-family","title":"1. Font Family","text":"<p>The <code>font-family</code> property specifies the font or list of fonts to use for text.</p> <pre><code>`body {\n  font-family: Arial, sans-serif; /* Specifies Arial as the preferred font family */\n}`\n</code></pre>"},{"location":"WD/Unit4/#2-web-fonts","title":"2. Web Fonts","text":"<p>Web fonts, like Google Fonts or Typekit, can be imported using the <code>@font-face</code> rule to expand font choices.</p> <pre><code>`@font-face {\n  font-family: 'CustomFont';\n  src: url('custom-font.woff2') format('woff2');\n}\n\nh2 {\n  font-family: 'CustomFont', sans-serif;\n}`\n</code></pre>"},{"location":"WD/Unit4/#3-font-variant","title":"3. Font Variant","text":"<p>The <code>font-variant</code> property allows you to use small caps for text.</p> <pre><code>`p {\n  font-variant: small-caps; /* Converts text to small caps */\n}`\n</code></pre>"},{"location":"WD/Unit4/#4-line-height","title":"4. Line Height","text":"<p><code>line-height</code> defines the vertical spacing between lines of text.</p> <pre><code>`article {\n  line-height: 1.5; /* Sets line height to 1.5 times the font size */\n}`\n</code></pre>"},{"location":"WD/Unit4/#working-with-block-elements-in-html","title":"Working with Block Elements in HTML","text":"<p>Block Elements: An Overview</p> <p>Block elements, also known as block-level elements, are HTML elements that are used to define the main structural elements of a web page. These elements typically start on a new line and take up the full width available within their parent container. Block elements create a distinct \"block\" or \"box\" in the web page's layout, and they are fundamental for organizing and structuring content. Block elements can contain other block elements or inline elements.</p> <p>Characteristics of Block Elements:</p> <ol> <li>Start on a New Line: Block elements are usually placed on a new line in the layout, creating a clear separation from other elements. Examples of block elements include <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;form&gt;</code>, and more.</li> <li>Full Width: By default, block elements expand to fill the entire width of their containing element (usually the parent container), unless their width is explicitly defined. This makes them suitable for creating distinct sections or containers on a web page.</li> <li>Can Contain Other Elements: Block elements can contain other block elements and inline elements. For example, a <code>&lt;div&gt;</code> element can hold text, images, other <code>&lt;div&gt;</code> elements, and more. This nesting capability allows for complex page layouts.</li> <li>Semantic Meaning: Many block elements carry semantic meaning, indicating the purpose of the content they enclose. For instance, <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> elements represent headings of different levels, while <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, and <code>&lt;li&gt;</code> elements are used for creating lists.</li> </ol> <p>Usage of Block Elements:</p> <p>Block elements are used extensively in web development for structuring content and controlling layout. Here are some common use cases:</p> <ol> <li>Text and Paragraphs: <code>&lt;p&gt;</code> elements are used for defining paragraphs of text. They create clear separations between different blocks of content.</li> <li>Headings: <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> elements are used for headings with varying levels of importance. They help structure content hierarchically.</li> <li>Lists: <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, and <code>&lt;li&gt;</code> elements are used for creating unordered lists, ordered lists, and list items, respectively.</li> <li>Divisions: <code>&lt;div&gt;</code> elements are often used as generic containers for grouping and styling content. They are commonly used in CSS for layout purposes.</li> <li>Tables: The <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code>, and related elements are used for creating tabular data structures. Tables can be used to present data in rows and columns.</li> <li>Forms: Form elements like <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;button&gt;</code> are block elements that facilitate user input and data submission.</li> </ol> <p>Block Elements and Layout:</p> <p>Block elements play a crucial role in controlling the layout of a web page. They enable web developers to structure content into well-defined sections, columns, and blocks. When combined with CSS (Cascading Style Sheets), block elements can be styled, positioned, and manipulated to achieve various layout designs.</p> <p>For example, a common layout structure might involve using <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;aside&gt;</code>, and <code>&lt;footer&gt;</code> elements as block-level containers to create a typical webpage layout with a header, navigation menu, main content area, sidebar, and footer. By using CSS, each of these block elements can be styled differently, and their positioning can be controlled to achieve a visually appealing and responsive design.</p> <p>Accessibility and SEO with Block Elements:</p> <p>Using block elements appropriately also has implications for accessibility and search engine optimization (SEO). Block-level elements convey semantic meaning and hierarchy to assistive technologies such as screen readers. Proper use of headings (<code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>) and lists (<code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>) can improve the accessibility of a web page.</p> <p>Additionally, search engines use the semantic structure of a webpage to index and rank content. By using block elements in a meaningful and organized way, you can enhance the SEO of your website, making it more discoverable by search engines.</p>"},{"location":"WD/Unit4/#working-with-lists-tables","title":"Working with lists &amp; Tables","text":""},{"location":"WD/Unit4/#lists-in-html","title":"Lists in HTML","text":"<p>Lists are used to organize and display information in a structured format. HTML offers three main types of lists:</p>"},{"location":"WD/Unit4/#1-unordered-lists-ul","title":"1. Unordered Lists (<code>&lt;ul&gt;</code>)","text":"<p>Unordered lists are used when the order of items is not significant. The list items are displayed with bullet points by default. To create an unordered list, use the <code>&lt;ul&gt;</code> element and wrap each list item with the <code>&lt;li&gt;</code> (list item) element.</p> <pre><code>`&lt;ul&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;`\n</code></pre> <p>This code will render an unordered list like this:</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul>"},{"location":"WD/Unit4/#2-ordered-lists-ol","title":"2. Ordered Lists (<code>&lt;ol&gt;</code>)","text":"<p>Ordered lists are used when the order of items is important. The list items are displayed with numbers or letters by default. To create an ordered list, use the <code>&lt;ol&gt;</code> element and wrap each list item with the <code>&lt;li&gt;</code> element.</p> <pre><code>`&lt;ol&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ol&gt;`\n</code></pre> <p>This code will render an ordered list like this:</p> <ol> <li>First</li> <li>Second</li> <li>Third</li> </ol>"},{"location":"WD/Unit4/#3-description-lists-dl","title":"3. Description Lists (<code>&lt;dl&gt;</code>)","text":"<p>Description lists are used to define terms and their descriptions. They consist of pairs of terms (defined by <code>&lt;dt&gt;</code>) and their descriptions (defined by <code>&lt;dd&gt;</code>).</p> <pre><code>`&lt;dl&gt;\n  &lt;dt&gt;Term 1&lt;/dt&gt;\n  &lt;dd&gt;Description of Term 1&lt;/dd&gt;\n  &lt;dt&gt;Term 2&lt;/dt&gt;\n  &lt;dd&gt;Description of Term 2&lt;/dd&gt;\n&lt;/dl&gt;`\n</code></pre> <p>This code will render a description list like this:</p> <p>Term 1 : Description of Term 1</p> <p>Term 2 : Description of Term 2</p>"},{"location":"WD/Unit4/#tables-in-html","title":"Tables in HTML","text":"<p>Tables are used to display structured data in rows and columns. They are created using a combination of elements:</p> <ul> <li><code>&lt;table&gt;</code>: The container for the entire table.</li> <li><code>&lt;tr&gt;</code>: Defines a table row.</li> <li><code>&lt;th&gt;</code>: Defines a table header cell (usually bold and centered).</li> <li><code>&lt;td&gt;</code>: Defines a table data cell (normal cell).</li> </ul>"},{"location":"WD/Unit4/#basic-table-structure","title":"Basic Table Structure","text":"<p>Here's a simple example of an HTML table:</p> <pre><code>`&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Header 1&lt;/th&gt;\n    &lt;th&gt;Header 2&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 1&lt;/td&gt;\n    &lt;td&gt;Data 2&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 3&lt;/td&gt;\n    &lt;td&gt;Data 4&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;`\n</code></pre> <p>This code will create a table with two columns and three rows:</p> <p>Header 1</p> <p>Header 2</p> <p>Data 1</p> <p>Data 2</p> <p>Data 3</p> <p>Data 4</p>"},{"location":"WD/Unit4/#table-attributes","title":"Table Attributes","text":"<p>HTML tables can be customized using various attributes:</p> <ul> <li><code>border</code>: Specifies the width of the table border (not recommended; use CSS for styling).</li> <li><code>width</code>: Sets the width of the table.</li> <li><code>cellspacing</code>: Specifies the space between cells.</li> <li><code>cellpadding</code>: Specifies the space between the cell content and cell borders.</li> </ul> <p>Example:</p> <pre><code>`&lt;table border=\"1\" width=\"50%\" cellspacing=\"10\" cellpadding=\"5\"&gt;\n  &lt;!-- Table content here --&gt;\n&lt;/table&gt;`\n</code></pre>"},{"location":"WD/Unit4/#table-captions","title":"Table Captions","text":"<p>You can add captions to tables using the <code>&lt;caption&gt;</code> element. The caption should be placed immediately after the opening <code>&lt;table&gt;</code> tag.</p> <pre><code>`&lt;table&gt;\n  &lt;caption&gt;Monthly Sales&lt;/caption&gt;\n  &lt;!-- Table content here --&gt;\n&lt;/table&gt;`\n</code></pre>"},{"location":"WD/Unit4/#table-headers","title":"Table Headers","text":"<p>Table headers are typically used in the first row of a table (inside <code>&lt;th&gt;</code> elements). They are bold and centered by default, making it easier for users to identify columns.</p>"},{"location":"WD/Unit4/#spanning-rows-and-columns","title":"Spanning Rows and Columns","text":"<p>HTML tables allow cells to span multiple rows or columns using the <code>rowspan</code> and <code>colspan</code> attributes. For example, to create a cell that spans two columns:</p> <p>html</p> <p><code>&lt;td colspan=\"2\"&gt;Spanning two columns&lt;/td&gt;</code></p>"},{"location":"WD/Unit4/#styling-tables-with-css","title":"Styling Tables with CSS","text":"<p>While HTML provides basic table styling attributes, it is recommended to use CSS for advanced table styling. CSS allows you to control the table's appearance, including borders, backgrounds, and text formatting. For example:</p> <pre><code>`table {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\nth {\n  background-color: #f2f2f2;\n}`\n</code></pre>"},{"location":"WD/Unit4/#best-practices-for-lists-and-tables","title":"Best Practices for Lists and Tables","text":"<ol> <li>Semantic Structure: Use lists and tables for their intended purposes. Lists should organize related items, and tables should display structured data.</li> <li>Accessibility: Ensure your lists and tables are accessible to users with disabilities by providing appropriate markup and using ARIA attributes when necessary.</li> <li>Responsive Design: Make your tables responsive by using CSS to handle different screen sizes, and consider using responsive tables or hiding columns on smaller screens.</li> <li>Consistency: Maintain a consistent design and layout for lists and tables throughout your website to improve user experience.</li> <li>Use CSS for Styling: Use CSS for styling rather than HTML attributes to separate content from presentation.</li> <li>Testing: Test your lists and tables across different browsers and devices to ensure they display correctly.</li> </ol>"},{"location":"WD/Unit4/#css-id-class","title":"CSS Id &amp; Class","text":""},{"location":"WD/Unit4/#css-selectors-overview","title":"CSS Selectors Overview","text":"<p>Before diving into CSS Id and Class selectors, let's briefly review what CSS selectors are and why they are essential in web development. CSS selectors are patterns used to select and style HTML elements. They define the rules for applying styles to specific elements or groups of elements on a web page. By using selectors, you can control the appearance, layout, and behavior of your web content.</p>"},{"location":"WD/Unit4/#css-id-selector","title":"CSS Id Selector","text":"<p>The CSS Id selector is used to target a single, unique HTML element on a web page. It is defined by using the <code>#</code> symbol followed by the Id attribute value of the HTML element you want to select. Id attributes are intended to be unique within an HTML document, making them ideal for selecting a specific element.</p>"},{"location":"WD/Unit4/#syntax","title":"Syntax:","text":"<pre><code>`#elementId {\n    /* CSS styles go here */\n}`\n</code></pre>"},{"location":"WD/Unit4/#example","title":"Example:","text":"<pre><code>`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt; #uniqueElement {\n            color: blue;\n            font-size: 16px;\n        } &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"uniqueElement\"&gt;This is a uniquely styled paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n</code></pre> <p>In the example above, we have an HTML paragraph element with the Id attribute set to \"uniqueElement.\" The CSS Id selector is then used to apply styles specifically to this element. It sets the text color to blue and the font size to 16 pixels.</p>"},{"location":"WD/Unit4/#key-points-about-css-id-selector","title":"Key Points about CSS Id Selector:","text":"<ul> <li>Should be unique within an HTML document.</li> <li>Begins with <code>#</code>.</li> <li>Used to target a single element.</li> <li>High specificity, which means it overrides less specific styles.</li> </ul>"},{"location":"WD/Unit4/#css-class-selector","title":"CSS Class Selector","text":"<p>The CSS Class selector, unlike the Id selector, can be applied to multiple HTML elements. It selects elements that have a specified class attribute. Class attributes can be reused across multiple elements, making this selector versatile for styling multiple elements consistently.</p>"},{"location":"WD/Unit4/#syntax_1","title":"Syntax:","text":"<pre><code>`.className {\n    /* CSS styles go here */\n}`\n</code></pre>"},{"location":"WD/Unit4/#example_1","title":"Example:","text":"<pre><code>`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt; .highlight {\n            background-color: yellow;\n            font-weight: bold;\n        } &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p class=\"highlight\"&gt;This is a highlighted paragraph.&lt;/p&gt;\n    &lt;p&gt;This is a regular paragraph.&lt;/p&gt;\n    &lt;p class=\"highlight\"&gt;Another highlighted paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n</code></pre> <p>In the example above, we have defined a CSS class called \"highlight.\" This class is applied to two different paragraphs, resulting in both paragraphs having a yellow background color and bold font weight.</p>"},{"location":"WD/Unit4/#key-points-about-css-class-selector","title":"Key Points about CSS Class Selector:","text":"<ul> <li>Can be applied to multiple elements.</li> <li>Begins with <code>.</code>.</li> <li>Used for styling groups of elements with shared characteristics.</li> <li>Less specific than the Id selector but more specific than element selectors (e.g., <code>p</code>, <code>div</code>).</li> </ul>"},{"location":"WD/Unit4/#differences-between-css-id-and-class-selectors","title":"Differences between CSS Id and Class Selectors","text":"<ol> <li> <p>Uniqueness:</p> <ul> <li>Id selectors must be unique within an HTML document. There can only be one element with a particular Id.</li> <li>Class selectors, on the other hand, can be used on multiple elements. You can apply the same class to multiple elements to style them consistently.</li> </ul> </li> <li> <p>Syntax:</p> <ul> <li>Id selectors begin with <code>#</code>, followed by the Id attribute value (e.g., <code>#myId</code>).</li> <li>Class selectors begin with <code>.</code>, followed by the class name (e.g., <code>.highlight</code>).</li> </ul> </li> <li> <p>Specificity:</p> <ul> <li>Id selectors have higher specificity than class selectors. This means that styles defined using Id selectors will override styles defined using class selectors.</li> </ul> </li> <li> <p>Use Cases:</p> <ul> <li>Id selectors are typically used when you want to uniquely style a specific element on a page.</li> <li>Class selectors are used when you want to style multiple elements that share common characteristics or styles.</li> </ul> </li> </ol>"},{"location":"WD/Unit4/#practical-use-cases","title":"Practical Use Cases","text":""},{"location":"WD/Unit4/#css-id-selector-use-cases","title":"CSS Id Selector Use Cases","text":"<ol> <li> <p>Navigation Menus:</p> <ul> <li>You can use Id selectors to uniquely style navigation menu items, ensuring that the current page's menu item stands out.</li> </ul> </li> <li> <p>Modal Windows:</p> <ul> <li>Id selectors are useful for styling modal windows or pop-up dialogs, as each modal may have a unique styling requirement.</li> </ul> </li> <li> <p>Forms:</p> <ul> <li>Id selectors can be applied to form elements like input fields and buttons to provide distinct styling for important form elements.</li> </ul> </li> </ol>"},{"location":"WD/Unit4/#css-class-selector-use-cases","title":"CSS Class Selector Use Cases","text":"<ol> <li> <p>Styling Elements with Common Characteristics:</p> <ul> <li>Class selectors are ideal for styling elements that share common characteristics, such as paragraphs with a specific class for highlighting.</li> </ul> </li> <li> <p>Reusable Styles:</p> <ul> <li>You can create classes for reusable styles, like buttons or alert messages, and apply them to multiple elements throughout your website.</li> </ul> </li> <li> <p>Responsive Design:</p> <ul> <li>Classes are often used in responsive web design to apply different styles to elements based on screen size or device type.</li> </ul> </li> </ol>"},{"location":"WD/Unit4/#box-model","title":"Box Model","text":""},{"location":"WD/Unit4/#components-of-the-box-model","title":"Components of the Box Model","text":""},{"location":"WD/Unit4/#1-content","title":"1. Content","text":"<ul> <li>The content is the innermost part of an HTML element, and it represents the actual information or data contained within the element. For example, in a <code>&lt;p&gt;</code> (paragraph) element, the text and any inline elements (e.g., links or spans) are considered the content.</li> </ul>"},{"location":"WD/Unit4/#2-padding","title":"2. Padding","text":"<ul> <li>Padding is the space between the content and the element's border. It provides internal spacing within an element, creating distance between the content and the border. Padding can be adjusted using CSS properties like <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>.</li> </ul>"},{"location":"WD/Unit4/#3-border","title":"3. Border","text":"<ul> <li>The border surrounds the padding and content and defines the element's visible boundary. It is typically a line or series of lines that can have various styles (e.g., solid, dashed, or dotted) and colors. You can control the border using properties such as <code>border-width</code>, <code>border-style</code>, and <code>border-color</code>.</li> </ul>"},{"location":"WD/Unit4/#4-margin","title":"4. Margin","text":"<ul> <li>Margin is the space outside the border of an element, creating separation between the element and adjacent elements. Margins control the spacing between elements on a web page. Like padding, margins can be adjusted using properties like <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code>.</li> </ul>"},{"location":"WD/Unit4/#how-the-box-model-works","title":"How the Box Model Works","text":"<p>The Box Model follows a simple principle: the total width and height of an element are the sum of its content, padding, border, and margin. Understanding this concept is crucial for precise control of layout and spacing in web design.</p> <p>For example, if you have an HTML element with the following CSS properties:</p> <pre><code>`div {\n  width: 200px;\n  height: 100px;\n  padding: 20px;\n  border: 2px solid #333;\n  margin: 10px;\n}`\n</code></pre> <ul> <li>The content width and height of the <code>&lt;div&gt;</code> are 200 pixels and 100 pixels, respectively, as defined by the <code>width</code> and <code>height</code> properties.</li> <li>The total width of the element, including padding and border, will be 244 pixels (200px content width + 20px padding-left + 20px padding-right + 2px border-left + 2px border-right).</li> <li>The total height of the element, including padding and border, will be 124 pixels (100px content height + 20px padding-top + 20px padding-bottom + 2px border-top + 2px border-bottom).</li> <li>The margin, which creates space around the element, is 10 pixels on all sides.</li> </ul>"},{"location":"WD/Unit4/#practical-use-cases_1","title":"Practical Use Cases","text":"<p>Understanding the Box Model is essential for various aspects of web development and design:</p>"},{"location":"WD/Unit4/#1-layout-control","title":"1. Layout Control","text":"<ul> <li>The Box Model allows developers to precisely control the placement and spacing of elements on a web page. By adjusting the padding, margin, and border properties, designers can create visually appealing layouts.</li> </ul>"},{"location":"WD/Unit4/#2-responsive-design","title":"2. Responsive Design","text":"<ul> <li>In responsive web design, the Box Model plays a crucial role in adjusting element sizes and spacing to fit different screen sizes and devices. CSS media queries are commonly used to modify the Box Model properties based on the viewport width.</li> </ul>"},{"location":"WD/Unit4/#3-debugging-and-troubleshooting","title":"3. Debugging and Troubleshooting","text":"<ul> <li>When elements don't appear as expected on a web page, understanding the Box Model can help in debugging. Developers can inspect elements using browser developer tools to see how the Box Model properties are affecting layout.</li> </ul>"},{"location":"WD/Unit4/#4-box-sizing","title":"4. Box Sizing","text":"<ul> <li>The default behavior of the Box Model is \"content-box,\" where the width and height properties apply only to the content area. CSS introduces the <code>box-sizing</code> property, which allows designers to change this behavior to \"border-box.\" In \"border-box\" mode, the width and height include padding and border, making it easier to create predictable layouts.</li> </ul>"},{"location":"WD/Unit4/#box-model-example","title":"Box Model Example","text":"<p>Let's illustrate the Box Model with a simple HTML and CSS example:</p> <pre><code>`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt; .box {\n      width: 200px;\n      height: 100px;\n      padding: 20px;\n      border: 2px solid #333;\n      margin: 10px;\n    } &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"box\"&gt;This is a box with content.&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n</code></pre> <p>In this example, we have a <code>&lt;div&gt;</code> element with a class of \"box.\" It has defined values for width, height, padding, border, and margin. When you view this in a web browser, you'll see how the Box Model components work together to create the element's appearance and spacing.</p>"},{"location":"WD/Unit4/#javascript-introduction","title":"JavaScript Introduction","text":"<p>JavaScript is a versatile and essential programming language for web development. It enables developers to add interactivity, dynamic behavior, and client-side scripting to web applications. In this comprehensive guide, we'll explore the elements of JavaScript, including its applications, advantages, popup boxes, programming details, and concepts like classes and objects.</p>"},{"location":"WD/Unit4/#javascript-an-essential-web-technology","title":"JavaScript: An Essential Web Technology","text":"<p>JavaScript, often abbreviated as JS, is a high-level, interpreted, and dynamically typed scripting language. It was initially created by Brendan Eich in just ten days while working at Netscape Communications Corporation in 1995. JavaScript has since become a fundamental technology for web development alongside HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets).</p>"},{"location":"WD/Unit4/#application-of-javascript","title":"Application of JavaScript","text":"<p>JavaScript is primarily used for client-side web development, meaning it runs within a user's web browser. Its main applications include:</p> <ol> <li>Enhancing User Interfaces: JavaScript can be used to create interactive and dynamic user interfaces. Developers can respond to user actions like clicks, mouse movements, and keyboard inputs to provide a more engaging experience.</li> <li>Form Validation: JavaScript can validate user input in web forms before submitting data to the server. This ensures that data is accurate and meets specific criteria.</li> <li>Manipulating HTML and CSS: JavaScript can modify the structure and style of a web page in real-time. This capability allows for features like image sliders, accordions, and collapsible menus.</li> <li>Handling Asynchronous Operations: JavaScript supports asynchronous programming, enabling web applications to fetch data from servers, update content without refreshing the entire page, and create responsive web applications.</li> <li>Creating Web Games: JavaScript, along with HTML5 and CSS, has opened the door to web-based gaming. It can be used to build browser games and interactive simulations.</li> <li>Building Web Applications: Modern web applications, including single-page applications (SPAs) and progressive web apps (PWAs), heavily rely on JavaScript to provide a seamless user experience.</li> </ol>"},{"location":"WD/Unit4/#advantages-of-javascript","title":"Advantages of JavaScript","text":"<p>JavaScript offers numerous advantages that make it a popular choice for web development:</p> <ol> <li>Versatility: JavaScript can be used on both the client and server sides, thanks to technologies like Node.js. This versatility allows developers to use the same language throughout the entire stack.</li> <li>Interactivity: JavaScript brings web pages to life by enabling interactive features. Users can click buttons, submit forms, and receive immediate feedback.</li> <li>Wide Adoption: JavaScript is supported by all major web browsers, making it accessible to a vast audience. This ubiquity ensures that web applications work consistently for users.</li> <li>Large Ecosystem: JavaScript has a rich ecosystem of libraries and frameworks, such as React, Angular, and Vue.js, that simplify web development and provide ready-made solutions for common tasks.</li> <li>Speed: Modern JavaScript engines are highly optimized, delivering fast execution times and responsiveness in web applications.</li> <li>Community Support: JavaScript has a massive and active developer community. This means abundant resources, tutorials, and support for developers.</li> </ol>"},{"location":"WD/Unit4/#popup-boxes-in-javascript","title":"Popup Boxes in JavaScript","text":"<p>JavaScript provides a way to interact with users through popup boxes, also known as dialog boxes. These popup boxes are essential for displaying messages, gathering user input, or confirming actions. There are three types of popup boxes in JavaScript:</p> <ol> <li> <p>Alert Box: The <code>alert()</code> function displays a simple message to the user in a dialog box with an \"OK\" button. It's commonly used for informational messages or to provide critical alerts.</p> <p><code>alert(\"This is an alert message!\");</code></p> </li> <li> <p>Confirm Box: The <code>confirm()</code> function presents a dialog box with \"OK\" and \"Cancel\" buttons. It allows users to confirm or cancel an action. The function returns <code>true</code> if the user clicks \"OK\" and <code>false</code> if they click \"Cancel.\"</p> </li> </ol> <p><code>if (confirm(\"Are you sure you want to delete this item?\")) {       // User clicked OK, perform the delete action   } else {       // User clicked Cancel, do nothing   }</code></p> <ul> <li> <p>Prompt Box: The <code>prompt()</code> function displays a dialog box with an input field, \"OK,\" and \"Cancel\" buttons. It's used for collecting user input. The function returns the text entered by the user or <code>null</code> if they click \"Cancel.\"</p> </li> <li> <p><code>const username = prompt(\"Please enter your username:\"); if (username !== null) {     // User provided a username, do something with it } else {     // User clicked Cancel, handle accordingly }</code></p> </li> </ul> <p>Popup boxes are a straightforward way to interact with users, gather information, and make sure they are aware of important messages or actions.</p>"},{"location":"WD/Unit4/#programming-details-in-javascript","title":"Programming Details in JavaScript","text":"<p>JavaScript is a versatile and expressive language with various programming constructs and concepts. Here are some essential programming details in JavaScript:</p>"},{"location":"WD/Unit4/#variables-and-data-types","title":"Variables and Data Types","text":"<p>JavaScript uses the <code>var</code>, <code>let</code>, or <code>const</code> keywords to declare variables. It supports various data types, including:</p> <ul> <li>Primitive Data Types: Number, String, Boolean, Null, Undefined, Symbol, and BigInt.</li> <li>Reference Data Types: Object (includes arrays, functions, and more).</li> </ul>"},{"location":"WD/Unit4/#conditional-statements","title":"Conditional Statements","text":"<p>JavaScript provides conditional statements like <code>if</code>, <code>else if</code>, and <code>else</code> to make decisions based on conditions.</p> <pre><code>`const age = 25;\nif (age &gt;= 18) {\n    console.log(\"You are an adult.\");\n} else {\n    console.log(\"You are not yet an adult.\");\n}`\n</code></pre>"},{"location":"WD/Unit4/#loops","title":"Loops","text":"<p>JavaScript supports various loops, including <code>for</code>, <code>while</code>, and <code>do...while</code>, for iterating over data or performing repetitive tasks.</p> <pre><code>`for (let i = 0; i &lt; 5; i++) {\n    console.log(\"Iteration \" + i);\n}`\n</code></pre>"},{"location":"WD/Unit4/#functions","title":"Functions","text":"<p>Functions in JavaScript are blocks of reusable code that can be called with different arguments. They are defined using the <code>function</code> keyword.</p> <pre><code>`function greet(name) {\n    return \"Hello, \" + name + \"!\";\n}\nconst greeting = greet(\"Alice\");\nconsole.log(greeting); // Output: \"Hello, Alice!\"`\n</code></pre>"},{"location":"WD/Unit4/#arrays-and-objects","title":"Arrays and Objects","text":"<p>Arrays and objects are fundamental data structures in JavaScript. Arrays store collections of values, while objects store collections of key-value pairs.</p> <pre><code>`const colors = [\"red\", \"green\", \"blue\"];\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30\n};`\n</code></pre>"},{"location":"WD/Unit4/#dom-manipulation","title":"DOM Manipulation","text":"<p>JavaScript can manipulate the Document Object Model (DOM) to change the content and behavior of web pages dynamically.</p> <pre><code>`// Change the text of an HTML element with the id \"myElement\"\ndocument.getElementById(\"myElement\").innerHTML = \"New Text\";`\n</code></pre>"},{"location":"WD/Unit4/#event-handling","title":"Event Handling","text":"<p>JavaScript can respond to user interactions and events, such as clicks and keyboard input, by attaching event handlers to HTML elements.</p> <pre><code>`// Add a click event listener to a button element\ndocument.getElementById(\"myButton\").addEventListener(\"click\", function() {\n    alert(\"Button clicked!\");\n});`\n</code></pre>"},{"location":"WD/Unit4/#error-handling","title":"Error Handling","text":"<p>JavaScript provides mechanisms for error handling using <code>try</code>, <code>catch</code>, and <code>finally</code> blocks.</p> <pre><code>`try {\n    // Code that might throw an error\n    const result = 10 / 0; // Division by zero\n    console.log(result);\n} catch (error) {\n    // Handle the error\n    console.error(\"An error occurred: \" + error.message);\n} finally {\n    // Optional: Code that always runs, whether there's an error or not\n}`\n</code></pre> <p>These are just a few programming details in JavaScript. The language offers a wide range of features and tools for building complex web applications.</p>"},{"location":"WD/Unit4/#class-and-object-in-javascript","title":"Class and Object in JavaScript","text":"<p>JavaScript is an object-oriented programming (OOP) language, and it supports object-oriented concepts like classes and objects. However, JavaScript's approach to OOP is prototype-based, which is different from the class-based inheritance found in languages like Java or C++.</p>"},{"location":"WD/Unit4/#objects-in-javascript","title":"Objects in JavaScript","text":"<p>In JavaScript, objects are collections of key-value pairs. They can represent real-world entities or abstract concepts. Objects are created using object literals or constructed using constructor functions.</p> <pre><code>`// Object literal\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30,\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \"!\");\n    }\n};\n\n// Constructor function\nfunction Person(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    this.greet = function() {\n        console.log(\"Hello, \" + this.firstName + \"!\");\n    };\n}\n</code></pre> <p>const john = new Person(\"John\", \"Doe\", 30);`</p>"},{"location":"WD/Unit4/#classes-in-javascript-es6-and-later","title":"Classes in JavaScript (ES6 and Later)","text":"<p>Starting with ECMAScript 6 (ES6), JavaScript introduced the <code>class</code> syntax to provide a more structured way to define and work with objects in an object-oriented manner. It's important to note that under the hood, JavaScript's class system is still based on prototypes.</p> <p>Here's an example of defining a class in JavaScript:</p> <pre><code>`class Person {\n    constructor(firstName, lastName, age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n\n    greet() {\n        console.log(\"Hello, \" + this.firstName + \"!\");\n    }\n}\n</code></pre> <p>const john = new Person(\"John\", \"Doe\", 30);`</p> <p>In this example, the <code>Person</code> class has a constructor for initializing object properties and a <code>greet</code> method for displaying a greeting message.</p>"},{"location":"WD/Unit4/#prototypes-in-javascript","title":"Prototypes in JavaScript","text":"<p>Prototypes play a crucial role in JavaScript's object-oriented model. Every object in JavaScript has a prototype, which is a reference to another object. When a property or method is accessed on an object, JavaScript looks for that property or method on the object itself. If it doesn't find it, it looks up the prototype chain until it finds the property or method or reaches the end of the chain.</p> <p>This mechanism allows for inheritance in JavaScript. Objects can inherit properties and methods from their prototypes.</p> <pre><code>`// Define a prototype object\nconst personPrototype = {\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \"!\");\n    }\n};\n\n// Create an object that inherits from the prototype\nconst john = Object.create(personPrototype);\njohn.firstName = \"John\";\njohn.lastName = \"Doe\";\n\njohn.greet(); // Output: \"Hello, John!\"`\n</code></pre> <p>In this example, <code>john</code> inherits the <code>greet</code> method from <code>personPrototype</code>.</p>"},{"location":"WD/Unit4/#es6-class-vs-prototype-based-objects","title":"ES6 Class vs. Prototype-Based Objects","text":"<p>ES6 classes provide a more intuitive and structured way to work with objects in JavaScript, especially for developers familiar with class-based languages. However, both prototype-based objects and ES6 classes are used in modern JavaScript development, depending on the context and developer preference.</p> <p>To summarize, JavaScript is a versatile programming language used for web development. It enables the creation of dynamic and interactive web applications through its capabilities such as popup boxes, conditional statements, loops, functions, and DOM manipulation. Additionally, JavaScript supports object-oriented programming concepts, including objects, classes, and prototypes, making it a powerful tool for building modern web applications.</p>"},{"location":"cd/","title":"Compiler Design","text":""},{"location":"cd/#syllabus","title":"Syllabus","text":"Unit Topic Hours Unit I INTRODUCTION TO COMPILERS 8 - Overview of compiler and translator - Types of Compiler - Analysis of the Source Program - The Phases of a compiler - Grouping of phases - Cousins of the Compiler - Design of lexical Analysis - Compiler writing tools - Cross compiler- bootstrapping Unit II SYNTAX ANALYSIS 8 - Review of Context-Free Grammars - Derivation trees and Parse Trees - Ambiguity - Top- Down Parsing - Recursive Descent parsing - Predictive parsing - LL(1) Grammars - Bottom-Up Parsing - Shift Reduce parsing - Operator precedence parsing (Concepts only) - LR parsing - Constructing SLR parsing tables - Constructing Canonical LR parsing tables - Constructing LALR parsing tables Unit III SEMANTIC ANALYSIS 8 - Need of semantic analysis - Abstract Parse trees for Expressions, variables, statements, functions, and class declarations - Syntax directed definitions - Syntax directed translation schemes for declaration processing, type analysis, scope analysis - Symbol Tables (ST) - Organization of ST for block structure and non-block structured languages - Symbol Table management Unit IV INTERMEDIATE CODE GENERATION AND ERROR RECOVERY 8 - Intermediate code generation - Intermediate languages - Design issues - Translation of different language features - Different types of intermediate forms - Error Handling and Recovery in Syntax Analyzer - YACC-Design of a syntax Analyzer for a Sample Language Unit V CODE OPTIMIZATION 8 - Principal Sources of Optimization - DAG- Optimization of Basic Blocks - Global Data Flow Analysis - Efficient Data Flow Algorithms - Issues in Design of a Code Generator - A Simple Code Generator Algorithm - Recent trends and Compiler tools - Advanced topics &amp; its Application - Virtual Machines and Interpretation Techniques - Just-In-Time (JIT) and Adaptive Compilation"},{"location":"dbms/","title":"Database Management System","text":""},{"location":"dbms/#syllabus","title":"Syllabus","text":"Unit Topic Hours Unit I Introduction 6 - Introduction to DBMS - DBMS Architecture - Data Models - E-R Diagram - Relational Database design Unit II SQL Concepts 8 - SQL Concepts - Basics of SQL - DDL, DML, DCL - Structure creation - Alteration - Defining constraints - Functions - Aggregate functions - Built-in functions numeric, date, string functions - Set operations - Sub-queries - Correlated sub-queries - Use of group by, having, order by - Join and its types - Exist, Any, All - View and its types Unit III Relational Database Design 5 - Functional Dependency (FD) Basic concepts - Closure of set of FD - Closure of attribute set - Decomposition - Normalization - 1NF, 2NF, 3NF, BCNF, 4NF - Query Optimization Unit IV Transaction Management 7 - Transaction control commands - Commit, Rollback, Save point - Transaction Management - Transaction concepts - Properties of transactions - Serializability of transactions - Two-Phase Commit protocol - Deadlock - Two-phase locking protocol - Cursors - Stored Procedures - Stored Function - Database Triggers Unit V Graphs and their Applications 4 - NoSQL Databases - Introduction - CRUD Operations - Data Mining - Advances in databases"},{"location":"dbms/Unit3/","title":"Unit 3: Relational Database Design","text":"<ul> <li>Functional Dependency (FD) Basic concepts</li> <li>Closure of set of FD</li> <li>Closure of attribute set</li> <li>Decomposition</li> <li>Normalization</li> <li>1NF, 2NF, 3NF, BCNF, 4NF</li> <li>Query Optimization</li> <li>Reference</li> </ul>"},{"location":"dbms/Unit3/#functional-dependency-fd-basic-concepts","title":"Functional Dependency (FD) Basic concepts","text":"<p>Functional dependency (FD) is a set of constraints between two attributes in a relation. Functional dependency says that if two tuples have same values for attributes A1, A2,..., An, then those two tuples must have to have same values for attributes B1, B2, ..., Bn.</p> <p>The functional dependency is a relationship that exists between two attributes. It typically exists between the primary key and non-key attribute within a table.</p> <p>For Example Assume we have an employee table with attributes: Emp_Id, Emp_Name, Emp_Address.</p> <p>Here Emp_Id attribute can uniquely identify the Emp_Name attribute of employee table because if we know the Emp_Id, we can tell that employee name associated with it.</p> <p>Functional dependency can be written as:</p> <pre><code>Emp_Id \u2192 Emp_Name\n\n</code></pre>"},{"location":"dbms/Unit3/#types-of-functional-dependencies","title":"Types of Functional Dependencies","text":""},{"location":"dbms/Unit3/#1trivial-functional-dependency","title":"1.Trivial functional dependency","text":"<p>A \u2192 B has trivial functional dependency if B is a subset of A. The following dependencies are also trivial like: A \u2192 A, B \u2192 B</p> <p>Example: Consider a table with two columns Employee_Id and Employee_Name.</p> <pre><code>{Employee_id, Employee_Name}   \u2192    Employee_Id is a trivial functional dependency as\nEmployee_Id is a subset of {Employee_Id, Employee_Name}.\nAlso, Employee_Id \u2192 Employee_Id and Employee_Name   \u2192    Employee_Name are trivial dependencies too.\n\n</code></pre>"},{"location":"dbms/Unit3/#2non-trivial-functional-dependency","title":"2.Non-trivial functional dependency","text":"<p>A \u2192 B has a non-trivial functional dependency if B is not a subset of A. When A intersection B is NULL, then A \u2192 B is called as complete non-trivial.</p> <p>Example:</p> <pre><code>ID   \u2192    Name,\nName \u2192  DOB\n\n</code></pre>"},{"location":"dbms/Unit3/#advantages-of-functional-dependencies","title":"Advantages of functional dependencies:","text":"<ul> <li>They help in reducing data redundancy in a database by identifying and eliminating unnecessary or duplicate data.</li> <li>They improve data integrity by ensuring that data is consistent and accurate across the database.</li> <li>They facilitate database maintenance by making it easier to modify, update, and delete data.</li> </ul>"},{"location":"dbms/Unit3/#disadvantages-of-functional-dependencies","title":"Disadvantages of functional dependencies:","text":"<ul> <li> <p>The process of identifying functional dependencies can be time-consuming and complex, especially in large databases with many tables and relationships.</p> </li> <li> <p>Overly restrictive functional dependencies can result in slow query performance or data inconsistencies, as data that should be related may not be properly linked.</p> </li> <li> <p>Functional dependencies do not take into account the semantic meaning of data, and may not always reflect the true relationships between data elements.</p> </li> </ul>"},{"location":"dbms/Unit3/#closure-of-set-of-fd","title":"Closure of set of FD","text":"<p>The Closure Of Functional Dependency means the complete set of all possible attributes that can be functionally derived from given functional dependency using the inference rules known as Armstrong's Rules.</p> <p>If \"F\" is a functional dependency then closure of functional dependency can be denoted using \"{F}+\".</p> <p>There are three steps to calculate closure of functional dependency. These are:</p> <ol> <li> <p>Add the attributes which are present on Left Hand Side in the original functional dependency.</p> </li> <li> <p>Now, add the attributes present on the Right Hand Side of the functional dependency.</p> </li> <li> <p>With the help of attributes present on Right Hand Side, check the other attributes that can be derived from the other given functional dependencies. Repeat this process until all the possible attributes which can be derived are added in the closure.</p> </li> </ol>"},{"location":"dbms/Unit3/#example","title":"Example","text":"<p>Consider the table <code>student_details</code> with attributes (Roll_No, Name, Marks, Location) and two functional dependencies:</p> <ul> <li>FD1: Roll_No \u2192 Name, Marks</li> <li>FD2: Name \u2192 Marks, Location</li> </ul> <p>Now, let's calculate the closure of all attributes in the relation using the following steps:</p>"},{"location":"dbms/Unit3/#step-1-add-attributes-from-the-lhs-of-fd1","title":"Step 1: Add Attributes from the LHS of FD1","text":"<p>{Roll_No}\u207a = {Roll_No}</p>"},{"location":"dbms/Unit3/#step-2-add-attributes-from-the-rhs-of-fd1","title":"Step 2: Add Attributes from the RHS of FD1","text":"<p>{Roll_No}\u207a = {Roll_No, Marks}</p>"},{"location":"dbms/Unit3/#step-3-derive-attributes-using-fd2","title":"Step 3: Derive Attributes Using FD2","text":"<p>While Roll_No cannot determine any other attribute, Name can determine other attributes such as Marks and Location using FD2 (Name \u2192 Marks, Location). Therefore, the complete closure of Roll_No is:</p> <p>{Roll_No}\u207a = {Roll_No, Marks, Name, Location}</p> <p>Similarly, we can calculate the closure for the \"Name\" attribute:</p>"},{"location":"dbms/Unit3/#step-1-add-attributes-from-the-lhs-of-fd2","title":"Step 1: Add Attributes from the LHS of FD2","text":"<p>{Name}\u207a = {Name}</p>"},{"location":"dbms/Unit3/#step-2-add-attributes-from-the-rhs-of-fd2","title":"Step 2: Add Attributes from the RHS of FD2","text":"<p>{Name}\u207a = {Name, Marks, Location}</p>"},{"location":"dbms/Unit3/#step-3-no-further-derivation","title":"Step 3: No Further Derivation","text":"<p>Since there are no functional dependencies where \"Marks\" or \"Location\" attribute is functionally determining any other attribute, we cannot add more attributes to the closure. Hence, the complete closure of Name is:</p> <p>{Name}\u207a = {Name, Marks, Location}</p> <p>Note: There are no functional dependencies where \"Marks\" and \"Location\" can functionally determine any attribute. Therefore, for those attributes, we can only add the attributes themselves in their closures:</p> <p>{Marks}\u207a = {Marks} {Location}\u207a = {Location}</p>"},{"location":"dbms/Unit3/#closure-of-attribute-set","title":"Closure of Attribute Set","text":"<p>Attribute closure of an attribute set can be defined as the set of attributes that can be functionally determined from it.</p>"},{"location":"dbms/Unit3/#how-to-find-attribute-closure-of-an-attribute-set","title":"How to Find Attribute Closure of an Attribute Set?","text":"<p>To find the attribute closure of an attribute set:</p> <ol> <li>Add elements of the attribute set to the result set.</li> <li>Recursively add elements to the result set that can be functionally determined from the elements of the result set.</li> </ol> <p>Using the functional dependency (FD) set of table 1, attribute closure can be determined as:</p> <ul> <li>(STUD_NO)\u207a = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}</li> <li>(STUD_STATE)\u207a = {STUD_STATE, STUD_COUNTRY}</li> </ul>"},{"location":"dbms/Unit3/#how-to-find-candidate-keys-and-super-keys-using-attribute-closure","title":"How to Find Candidate Keys and Super Keys using Attribute Closure?","text":"<ul> <li>If the attribute closure of an attribute set contains all attributes of the relation, the attribute set will be a super key of the relation.</li> <li>If no subset of this attribute set can functionally determine all attributes of the relation, the set will be a candidate key as well.</li> </ul> <p>For example, using the FD set of table 1:</p> <ul> <li>(STUD_NO, STUD_NAME)\u207a = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}</li> <li>(STUD_NO)\u207a = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}</li> </ul> <p>(STUD_NO, STUD_NAME) will be a super key but not a candidate key because its subset (STUD_NO)\u207a is equal to all attributes of the relation. So, STUD_NO will be a candidate key.</p>"},{"location":"dbms/Unit3/#advantages-of-attribute-closure","title":"Advantages of attribute closure:","text":"<ul> <li> <p>Attribute closures help to identify all possible attributes that can be derived from a set of given attributes.</p> </li> <li> <p>They facilitate database design by identifying relationships between attributes and tables, which can help to optimize query performance.</p> </li> <li> <p>They ensure data consistency by identifying all possible combinations of attributes that can exist in the database.</p> </li> </ul>"},{"location":"dbms/Unit3/#disadvantages-of-attribute-closure","title":"Disadvantages of attribute closure:","text":"<ul> <li> <p>The process of calculating attribute closures can be computationally expensive, especially for large datasets.</p> </li> <li> <p>Attribute closures can become too complex to manage, especially as the number of attributes and tables in a database grows.</p> </li> <li> <p>Attribute closures do not take into account the semantic meaning of data, and may not always accurately reflect the relationships between data elements.</p> </li> </ul>"},{"location":"dbms/Unit3/#decomposition","title":"Decomposition","text":"<ul> <li>When a relation in the relational model is not in appropriate normal form then the decomposition of a relation is required.</li> <li>In a database, it breaks the table into multiple tables.</li> <li>If the relation has no proper decomposition, then it may lead to problems like loss of information.</li> <li>Decomposition is used to eliminate some of the problems of bad design like anomalies, inconsistencies, and redundancy.</li> <li>Decomposition in Database Management System is to break a relation into multiple relations to bring it into an appropriate normal form. It helps to remove redundancy, inconsistencies, and anomalies from a database. The decomposition of a relation R in a relational schema is the process of replacing the original relation R with two or more relations in a relational schema. Each of these relations contains a subset of the attributes of R and together they include all attributes of R.</li> </ul>"},{"location":"dbms/Unit3/#types-of-decomposition","title":"Types of Decomposition","text":""},{"location":"dbms/Unit3/#1-lossless-decomposition","title":"1. Lossless Decomposition","text":"<p>Lossless decomposition ensures that no information is lost when a relation is decomposed. It guarantees that the join of relations will result in the same relation as it was decomposed.</p> <p>Key Points:</p> <ul> <li>If no information is lost during the decomposition, it's considered lossless.</li> <li>The join of decomposed relations should yield the original relation.</li> <li>A relation is considered to have a lossless decomposition if the natural joins of all the decompositions give the original relation.</li> </ul> <p>Example:</p> <p>Consider the \"EMPLOYEE_DEPARTMENT\" table:</p> EMP_ID EMP_NAME EMP_AGE EMP_CITY DEPT_ID DEPT_NAME 22 Denim 28 Mumbai 827 Sales 33 Alina 25 Delhi 438 Marketing 46 Stephan 30 Bangalore 869 Finance 52 Katherine 36 Mumbai 575 Production 60 Jack 40 Noida 678 Testing <p>This relation is decomposed into two relations: \"EMPLOYEE\" and \"DEPARTMENT.\"</p> <p>EMPLOYEE table:</p> EMP_ID EMP_NAME EMP_AGE EMP_CITY 22 Denim 28 Mumbai 33 Alina 25 Delhi 46 Stephan 30 Bangalore 52 Katherine 36 Mumbai 60 Jack 40 Noida <p>DEPARTMENT table:</p> DEPT_ID EMP_ID DEPT_NAME 827 22 Sales 438 33 Marketing 869 46 Finance 575 52 Production 678 60 Testing <p>When these two relations are joined on the common column \"EMP_ID,\" the resultant relation is the same as the original relation:</p> <p>Employee \u22c8 Department</p> EMP_ID EMP_NAME EMP_AGE EMP_CITY DEPT_ID DEPT_NAME 22 Denim 28 Mumbai 827 Sales 33 Alina 25 Delhi 438 Marketing 46 Stephan 30 Bangalore 869 Finance 52 Katherine 36 Mumbai 575 Production 60 Jack 40 Noida 678 Testing <p>Hence, the decomposition is a lossless join decomposition.</p>"},{"location":"dbms/Unit3/#2-dependency-preserving","title":"2. Dependency Preserving","text":"<p>Dependency preserving is an essential constraint of a database design.</p> <p>Key Points:</p> <ul> <li>At least one decomposed table must satisfy every dependency.</li> <li>If a relation R is decomposed into relations R1 and R2, the dependencies of R must either be a part of R1 or R2 or must be derivable from the combination of functional dependencies of R1 and R2.</li> </ul> <p>For example, suppose there is a relation R (A, B, C, D) with a functional dependency set (A -&gt; BC). The relational R is decomposed into R1 (ABC) and R2 (AD), which is dependency preserving because the FD A -&gt; BC is a part of relation R1 (ABC).</p>"},{"location":"dbms/Unit3/#normalization","title":"Normalization","text":"<p>Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places).</p> <p>Problems because of data redundancy: Data redundancy unnecessarily increases the size of the database as the same data is repeated in many places. Inconsistency problems also arise during insert, delete and update operations.</p> <ul> <li>Normalization is the process of organizing the data in the database.</li> <li>Normalization is used to minimize the redundancy from a relation or set of relations. It is also used to eliminate undesirable characteristics like Insertion, Update, and Deletion Anomalies.</li> <li>Normalization divides the larger table into smaller and links them using relationships.</li> <li>The normal form is used to reduce redundancy from the database table.</li> </ul> <p>The main reason for normalizing the relations is removing these anomalies. Failure to eliminate anomalies leads to data redundancy and can cause data integrity and other problems as the database grows. Normalization consists of a series of guidelines that helps to guide you in creating a good database structure.</p> <p>Data modification anomalies can be categorized into three types:</p> <ul> <li>Insertion Anomaly: Insertion Anomaly refers to when one cannot insert a new tuple into a relationship due to lack of data.</li> <li>Deletion Anomaly: The delete anomaly refers to the situation where the deletion of data results in the unintended loss of some other important data.</li> <li>Updatation Anomaly: The update anomaly is when an update of a single data value requires multiple rows of data to be updated.</li> </ul>"},{"location":"dbms/Unit3/#advantages-of-normalization","title":"Advantages of Normalization","text":"<ul> <li>Normalization helps to minimize data redundancy.</li> <li>Greater overall database organization.</li> <li>Data consistency within the database.</li> <li>Much more flexible database design.</li> <li>Enforces the concept of relational integrity.</li> </ul>"},{"location":"dbms/Unit3/#disadvantages-of-normalization","title":"Disadvantages of Normalization","text":"<ul> <li>You cannot start building the database before knowing what the user needs.</li> <li>The performance degrades when normalizing the relations to higher normal forms, i.e., 4NF, 5NF.</li> <li>It is very time-consuming and difficult to normalize relations of a higher degree.</li> <li>Careless decomposition may lead to a bad database design, leading to serious problems.</li> </ul>"},{"location":"dbms/Unit3/#1nf-2nf-3nf-bcnf-4nf","title":"1NF, 2NF, 3NF, BCNF, 4NF","text":"Normal Form Description 1NF A relation is in 1NF if it contains an atomic value. 2NF A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key. 3NF A relation will be in 3NF if it is in 2NF and no transition dependency exists. BCNF A stronger definition of 3NF is known as Boyce Codd's normal form. 4NF A relation will be in 4NF if it is in Boyce Codd's normal form and has no multi-valued dependency. 5NF A relation is in 5NF if it is in 4NF and does not contain any join dependency; joining should be lossless."},{"location":"dbms/Unit3/#1-first-normal-form-1nf","title":"1. First Normal Form (1NF)","text":"<p>If a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in first normal form if it does not contain any composite or multi-valued attribute. A relation is in first normal form if every attribute in that relation is singled valued attribute.</p> <p>A table is in 1 NF if:</p> <ul> <li>There are only Single Valued Attributes.</li> <li>Attribute Domain does not change.</li> <li>There is a unique name for every Attribute/Column.</li> <li>The order in which data is stored does not matter.</li> </ul> <p>Example:</p> <p>Original Table (Not in 1NF):</p> ID Name Courses 1 A c1, c2 2 E c3 3 M c2, c3 <p>In the above table, the \"Courses\" column is a multi-valued attribute, so it is not in 1NF.</p> <p>Table in 1NF (Each Course as a Separate Row):</p> ID Name Course 1 A c1 1 A c2 2 E c3 3 M c2 3 M c3 <p>Note: A database design is considered bad if it is not even in the First Normal Form (1NF).</p>"},{"location":"dbms/Unit3/#2-second-normal-form-2nf","title":"2. Second Normal Form (2NF)","text":"<p>Second Normal Form (2NF): Second Normal Form (2NF) is based on the concept of full functional dependency. Second Normal Form applies to relations with composite keys, that is, relations with a primary key composed of two or more attributes. A relation with a single-attribute primary key is automatically in at least 2NF.</p> <p>Example-:</p> <p>Consider the following functional dependencies in relation R (A, B, C, D):</p> <ul> <li>AB -&gt; C [A and B together determine C]</li> <li>BC -&gt; D [B and C together determine D]</li> </ul> <p>In this case, we can see that the relation R has a composite candidate key {A, B} as AB -&gt; C. Therefore, A and B together uniquely determine the value of C. Similarly, BC -&gt; D shows that B and C together uniquely determine the value of D.</p> <p>The relation R is already in 1NF because it does not have any repeating groups or nested relations.</p> <p>However, we can see that the non-prime attribute D is functionally dependent on only part of a candidate key, BC. This violates the 2NF condition.</p>"},{"location":"dbms/Unit3/#3-third-normal-form-3nf","title":"3. Third Normal Form (3NF):","text":"<ul> <li>A relation will be in 3NF if it is in 2NF and does not contain any transitive partial dependency.</li> <li>3NF is used to reduce data duplication and achieve data integrity.</li> <li>If there is no transitive dependency for non-prime attributes, then the relation must be in the third normal form.</li> </ul> <p>Conditions for 3NF: For every non-trivial functional dependency X \u2192 Y, a relation is in 3NF if it holds at least one of the following conditions: 1. X is a super key. 2. Y is a prime attribute, i.e., each element of Y is part of some candidate key.</p> <p>Example:</p> <p>Consider the \"EMPLOYEE_DETAIL\" table:</p> EMP_ID EMP_NAME EMP_ZIP EMP_STATE EMP_CITY 222 Harry 201010 UP Noida 333 Stephan 02228 US Boston 444 Lan 60007 US Chicago 555 Katharine 06389 UK Norwich 666 John 462007 MP Bhopal <ul> <li>Super key in the table above: {EMP_ID}, {EMP_ID, EMP_NAME}, {EMP_ID, EMP_NAME, EMP_ZIP}, and so on.</li> <li>Candidate key: {EMP_ID}</li> <li>Non-prime attributes: In the given table, all attributes except EMP_ID are non-prime.</li> <li>Here, EMP_STATE &amp; EMP_CITY are dependent on EMP_ZIP, and EMP_ZIP is dependent on EMP_ID. The non-prime attributes (EMP_STATE, EMP_CITY) transitively depend on the super key (EMP_ID), violating the rule of the third normal form.</li> </ul> <p>To achieve 3NF, we need to move EMP_CITY and EMP_STATE to a new \"EMPLOYEE_ZIP\" table, with EMP_ZIP as the Primary key.</p> <p>EMPLOYEE table:</p> EMP_ID EMP_NAME EMP_ZIP 222 Harry 201010 333 Stephan 02228 444 Lan 60007 555 Katharine 06389 666 John 462007 <p>EMPLOYEE_ZIP table:</p> EMP_ZIP EMP_STATE EMP_CITY 201010 UP Noida 02228 US Boston 60007 US Chicago 06389 UK Norwich 462007 MP Bhopal <p>This separation of data into two tables (EMPLOYEE and EMPLOYEE_ZIP) satisfies the third normal form and eliminates transitive dependencies.</p>"},{"location":"dbms/Unit3/#4boyce-codd-normal-form-bcnf","title":"4.Boyce-Codd Normal Form (BCNF):","text":"<p>Boyce--Codd Normal Form (BCNF) is a level of normalization in database design that considers all candidate keys in a relation. BCNF has additional constraints compared to the general definition of 3NF.</p> <p>Rules for BCNF:</p> <ol> <li>Rule 1: The table should be in the 3rd Normal Form (3NF).</li> <li>Rule 2: X should be a superkey for every functional dependency (FD) X \u2192 Y in a given relation.</li> </ol> <p>How to Satisfy BCNF:</p> <p>To satisfy BCNF, a table may need to be decomposed into further tables. Here is the full procedure for transforming a table into BCNF. Let's start by dividing the main table into two tables: \"Stu_Branch\" and \"Stu_Course\" tables.</p> <p>Stu_Branch Table:</p> Stu_ID Stu_Branch 101 Computer Science &amp; Engineering 102 Electronics &amp; Communication Engineering <p>Candidate Key for this table: Stu_ID.</p> <p>Stu_Course Table:</p> Stu_Course Branch_Number Stu_Course_No DBMS B_001 201 Computer Networks B_001 202 VLSI Technology B_003 401 Mobile Communication B_003 402 <p>Candidate Key for this table: Stu_Course.</p> <p>Stu_ID to Stu_Course_No Table:</p> Stu_ID Stu_Course_No 101 201 101 202 102 401 102 402 <p>Candidate Key for this table: {Stu_ID, Stu_Course_No}.</p> <p>After decomposing the main table into further tables, it is now in BCNF as it satisfies the condition that X is a superkey for every functional dependency X \u2192 Y.</p> <p>This decomposition ensures that the BCNF requirements are met and helps in achieving a well-structured and normalized database design.</p>"},{"location":"dbms/Unit3/#query-optimization","title":"Query Optimization:","text":"<p>Query optimization is of great importance for the performance of a relational database, especially for the execution of complex SQL statements. A query optimizer decides the best methods for implementing each query.</p> <p>The query optimizer selects, for instance, whether or not to use indexes for a given query, and which join methods to use when joining multiple tables. These decisions have a tremendous effect on SQL performance, and query optimization is a key technology for every application, from operational systems to data warehouses and analytical systems to content management systems.</p>"},{"location":"dbms/Unit3/#principles-of-query-optimization","title":"Principles of Query Optimization:","text":"<ol> <li> <p>Understand the Query Execution: The first phase of query optimization is understanding what the database is performing. Different databases have different commands for this. For example, in MySQL, one can use the \"EXPLAIN [SQL Query]\" keyword to see the query plan. In Oracle, one can use the \"EXPLAIN PLAN FOR [SQL Query]\" to see the query plan.</p> </li> <li> <p>Retrieve as Little Data as Possible: Minimize the amount of data retrieved from the database. The more information retrieved from the query, the more resources the database needs to process and store. Avoid using 'SELECT *' when only specific columns are needed.</p> </li> <li> <p>Store Intermediate Results: For complex queries, consider using subqueries, inline views, and UNION-type statements to generate intermediate results. These transitional results are not saved in the database but are directly used within the query. Be cautious when dealing with large transitional results, as they can impact performance.</p> </li> </ol>"},{"location":"dbms/Unit3/#query-optimization-strategies","title":"Query Optimization Strategies:","text":"<ol> <li> <p>Use Index: Utilize indexing as the primary strategy to speed up a query. Well-designed indexes can significantly improve query performance.</p> </li> <li> <p>Aggregate Tables: Pre-populate tables at higher levels to reduce the amount of data that needs to be processed during query execution.</p> </li> <li> <p>Vertical Partitioning: Partition tables by columns to reduce the amount of data a SQL query needs to process.</p> </li> <li> <p>Horizontal Partitioning: Partition tables by data value, often based on time, to reduce the data volume processed by SQL queries.</p> </li> <li> <p>De-normalization: Combine multiple tables into a single table to reduce the need for extensive table joins, thereby speeding up query execution.</p> </li> <li> <p>Server Tuning: Adjust server parameters to fully utilize hardware resources, improving query execution speed. Server tuning is specific to each server's hardware and software configuration.</p> </li> </ol> <p>Query optimization is a critical aspect of database performance tuning, and applying these principles and strategies can lead to significant improvements in SQL query performance.</p>"},{"location":"dbms/Unit3/#components-of-query-optimizer","title":"Components of Query Optimizer:","text":"<p>The query optimizer consists of three components: 1. Query Transformer: Determines if it's advantageous to change original SQL statements into less expensive, semantically equivalent SQL statements. 2. Estimator: Calculates the overall cost of an execution plan, using techniques like selectivity (row selectivity based on query predicates), cardinality (number of rows returned by each action), and cost (measuring resource usage). 3. Plan Generator: Generates feasible execution plan designs due to multiple combinations available for achieving the same goal.</p>"},{"location":"dbms/Unit3/#automatic-tuning-optimizer","title":"Automatic Tuning Optimizer:","text":"<p>The optimizer performs various operations depending on how it is invoked. It offers different categories of optimizations: - Normal Optimization: Generates an execution strategy for SQL statements. It operates within tight time constraints and aims to choose the best plan. - SQL Tuning Advisor Optimization: Activated by SQL Tuning Advisor, it performs additional research to enhance plans created in regular mode. It generates a set of activities to create a better plan.</p>"},{"location":"dbms/Unit3/#methods-of-query-optimization-in-dbms","title":"Methods of Query Optimization in DBMS:","text":"<p>Cost-Based Optimization: In cost-based optimization, the optimizer selects the most efficient way to execute a SQL statement. It calculates cost estimates for potential plans and chooses the plan with the lowest estimated cost. This method is also known as the Cost-Based Optimizer.</p> <ul> <li>Execution Plans: Describe the actions taken by the database to execute a SQL statement. Each operation in the plan has a cost associated with it.</li> <li>Query Blocks: Internally, the optimizer uses query blocks to represent SELECT blocks in the original SQL statement. Query blocks are used to optimize parts of the query individually.</li> </ul> <p>Adaptive Query Optimizer in DBMS:</p> <p>Adaptive query optimization allows the optimizer to modify execution plans in real-time and learn new facts that can improve statistics. It's useful when available data is insufficient for generating a perfect plan.</p> <p>Adaptive plans are significant because they help avoid subpar default plans due to incorrect cardinality estimation. The optimizer can adjust the plan as it's being executed based on actual execution statistics, resulting in a more ideal final plan. This final plan is then used for further executions, ensuring that subpar plans are not reused.</p>"},{"location":"dbms/Unit3/#references","title":"References","text":"<ul> <li>https://www.javatpoint.com/dbms-functional-dependency</li> <li>https://www.tutorialspoint.com/dbms/database_normalization.htm</li> <li>https://www.geeksforgeeks.org/functional-dependency-and-attribute-closure/?ref=lbp</li> <li>https://minigranth.in/dbms-tutorial/closure-of-functional-dependency</li> <li>https://www.javatpoint.com/dbms-normalization</li> <li>https://www.geeksforgeeks.org/introduction-of-database-normalization/?ref=lbp</li> <li>https://www.geeksforgeeks.org/first-normal-form-1nf/?ref=lbp</li> <li>https://www.geeksforgeeks.org/second-normal-form-2nf/?ref=lbp</li> <li>https://www.javatpoint.com/dbms-third-normal-form</li> <li>https://www.geeksforgeeks.org/boyce-codd-normal-form-bcnf/?ref=lbp</li> <li>https://www.javatpoint.com/dbms-forth-normal-form</li> <li>https://www.tutorialspoint.com/what-is-query-optimization</li> <li>https://www.scaler.com/topics/query-optimization-in-dbms/</li> <li>https://www.tutorialandexample.com/query-optimization-in-dbms</li> </ul>"},{"location":"dbms/Unit4/","title":"Unit 4: Transaction Management","text":"<p>Syllabus</p> <ul> <li>Unit 4: Transaction Management</li> <li>Transaction Control Commands<ul> <li>1.COMMIT</li> <li>2.ROLLBACK</li> <li>3.SAVEPOINT</li> </ul> </li> <li>Transaction Management<ul> <li>Transaction states</li> </ul> </li> <li>Transaction Concepts<ul> <li>Transaction</li> <li>Operations of Transaction:</li> </ul> </li> <li>Properties of Transaction</li> <li>Serializabity of transactions<ul> <li>Types of Serializability</li> <li>1. Conflict Serializability</li> <li>2. View Serializability</li> <li>Benefits of Serializability in DBMS</li> </ul> </li> <li>Two-Phase Commit Protocol<ul> <li>Working of 2PC:</li> <li>Phase 1 (the prepare phase) -</li> <li>Phase 2 (the commit phase) -</li> </ul> </li> <li>Deadlock</li> <li>Deadlock Avoidance</li> <li>Deadlock Detection<ul> <li>Wait for Graph</li> <li>Wait-Die scheme</li> <li>Wound wait scheme</li> </ul> </li> <li>Two-Phase Locking Protocol<ul> <li>Strict Two-phase locking (Strict-2PL)</li> </ul> </li> <li>Cursors</li> <li>Stored Procedures<ul> <li>Creating a Procedure</li> <li>Executing Stored Procedure</li> <li>Drop Procedure</li> </ul> </li> <li>Stored Function<ul> <li>Parameter Used</li> <li>MySQL Stored Function Example</li> <li>Stored Function Call</li> <li>Stored Function Call in Procedure</li> </ul> </li> <li>Trigger</li> <li>References</li> </ul> <p>Transactions</p> <p>Transactions are a set of operations used to perform a logical set of work. It is the bundle of all the instructions of a logical operation. A transaction usually means that the data in the database has changed. One of the major uses of DBMS is to protect the user's data from system failures. It is done by ensuring that all the data is restored to a consistent state when the computer is restarted after a crash.</p> <p>Any logical work or set of works that are done on the data of a database is known as a transaction. Logical work can be inserting a new value in the current database, deleting existing values, or updating the current values in the database.</p>"},{"location":"dbms/Unit4/#transaction-control-commands","title":"Transaction Control Commands","text":"<p>In a Relational Database Management System (RDBMS), the Structured Query Language (SQL) is used to perform multiple operations to store, retrieve and manipulate the data across various tables in a database. Let us consider few scenarios where we might have updated a record mistakenly and want to restore the data or we have inserted few records and want to save them, there Transaction Control Language (TCL) comes into the picture. The Transaction Control Language is used to maintain the integrity and consistency of the data stored in the database.</p>"},{"location":"dbms/Unit4/#1commit","title":"1.COMMIT","text":"<p>This command is used to make a transaction permanent in a database. So it can be said that commit command saves the work done as it ends the current transaction by making permanent changes during the transaction.</p> <p>Here's an example using the \"EMPLOYEE\" table:</p> <p>| EMP_ID | EMP_NAME | EMP_LOC \u00a0 |</p> <p>| ------ | -------- | --------- |</p> <p>| 1356 \u00a0 | Raju \u00a0 \u00a0 | Delhi \u00a0 \u00a0 |</p> <p>| 2678 \u00a0 | Neeta \u00a0 \u00a0| Bangalore |</p> <p>| 9899 \u00a0 | Sanjay \u00a0 | Hyderabad |</p> <pre><code>\n-- Update the location of 'Raju' to 'Hyderabad'\n\nUPDATE EMPLOYEE SET EMP_LOC = 'Hyderabad'  WHERE EMP_NAME = 'Raju';\n\nCOMMIT;\n\n</code></pre> <p>After the <code>COMMIT</code> command, the table is updated as follows:</p> <p>| EMP_ID | EMP_NAME | EMP_LOC \u00a0 |</p> <p>| ------ | -------- | --------- |</p> <p>| 1356 \u00a0 | Raju \u00a0 \u00a0 | Hyderabad |</p> <p>| 2678 \u00a0 | Neeta \u00a0 \u00a0| Bangalore |</p> <p>| 9899 \u00a0 | Sanjay \u00a0 | Hyderabad |</p>"},{"location":"dbms/Unit4/#2rollback","title":"2.ROLLBACK","text":"<p>This command is used to restore the database to its original state since the last command that was committed. The syntax of the Rollback command is as below:</p> <p>ROLLBACK;</p> <p>Also, the ROLLBACK command is used along with savepoint command to leap to a save point in a transaction. For example:</p> <pre><code>\n-- Incorrectly updated 'Raju' to 'Bangalore', now rollback to previous state\n\nUPDATE EMPLOYEE SET EMP_LOC = 'Bangalore'  WHERE EMP_NAME = 'Raju';\n\nROLLBACK;\n\n</code></pre> <p>Before <code>ROLLBACK</code>:</p> <p>| EMP_ID | EMP_NAME | EMP_LOC \u00a0 |</p> <p>| ------ | -------- | --------- |</p> <p>| 1356 \u00a0 | Raju \u00a0 \u00a0 | Bangalore |</p> <p>| 2678 \u00a0 | Neeta \u00a0 \u00a0| Bangalore |</p> <p>| 9899 \u00a0 | Sanjay \u00a0 | Hyderabad |</p> <p>After <code>ROLLBACK</code>:</p> <p>| EMP_ID | EMP_NAME | EMP_LOC \u00a0 |</p> <p>| ------ | -------- | --------- |</p> <p>| 1356 \u00a0 | Raju \u00a0 \u00a0 | Hyderabad |</p> <p>| 2678 \u00a0 | Neeta \u00a0 \u00a0| Bangalore |</p> <p>| 9899 \u00a0 | Sanjay \u00a0 | Hyderabad |</p>"},{"location":"dbms/Unit4/#3savepoint","title":"3.SAVEPOINT","text":"<p>The <code>SAVEPOINT</code> command is used to temporarily save a transaction. You can use it to rollback to a specific point in the transaction. Here's an example:</p> <p>| ORDER_ID | ITEM_NAME \u00a0|</p> <p>| -------- | ---------- |</p> <p>| 199 \u00a0 \u00a0 \u00a0| TELEVISION |</p> <p>| 290 \u00a0 \u00a0 \u00a0| CAMERA \u00a0 \u00a0 |</p> <pre><code>\n-- Insert values and create savepoints\n\nINSERT INTO ORDERS VALUES ('355', 'CELL PHONE');\n\nCOMMIT;\n\nUPDATE ORDERS SET ITEM_NAME = 'SMART PHONE'  WHERE ORDER_ID = '355';\n\nSAVEPOINT A;\n\nINSERT INTO ORDERS VALUES ('566', 'BLENDER');\n\nSAVEPOINT B;\n\n</code></pre> <p>After these commands, the \"ORDERS\" table looks like this:</p> <p>| ORDER_ID | ITEM_NAME \u00a0 |</p> <p>| -------- | ----------- |</p> <p>| 199 \u00a0 \u00a0 \u00a0| TELEVISION \u00a0|</p> <p>| 290 \u00a0 \u00a0 \u00a0| CAMERA \u00a0 \u00a0 \u00a0|</p> <p>| 355 \u00a0 \u00a0 \u00a0| SMART PHONE |</p> <p>| 566 \u00a0 \u00a0 \u00a0| BLENDER \u00a0 \u00a0 |</p> <p>Now, you can use the <code>ROLLBACK TO</code> command to roll back to a specific savepoint. For example:</p> <pre><code>\n-- Rollback to savepoint A\n\nROLLBACK  TO A;\n\n</code></pre> <p>After the <code>ROLLBACK TO A</code> command, the \"ORDERS\" table will be:</p> <p>| ORDER_ID | ITEM_NAME \u00a0 |</p> <p>| -------- | ----------- |</p> <p>| 199 \u00a0 \u00a0 \u00a0| TELEVISION \u00a0|</p> <p>| 290 \u00a0 \u00a0 \u00a0| CAMERA \u00a0 \u00a0 \u00a0|</p> <p>| 355 \u00a0 \u00a0 \u00a0| SMART PHONE |</p>"},{"location":"dbms/Unit4/#transaction-management","title":"Transaction Management","text":"<p>A transaction is a logical unit of work performed on a database. They are logically ordered units of work completed by the end-user or an application.</p> <p>A transaction is made up of one or more database modifications. Creating, updating, or deleting a record from a table, for example. To preserve data integrity and address database issues, it's critical to keep track of these transactions. We can bundle SQL queries together and run them as a single transaction</p>"},{"location":"dbms/Unit4/#transaction-states","title":"Transaction states","text":"<p>There are various database transaction states as follows.</p> <p></p> <ol> <li> <p>Active state - this is the state in which a transaction execution process begins. Operations such as read or write are performed on the database.</p> </li> <li> <p>Partially committed - means that a transaction is only partially committed once it has been completed.</p> </li> <li> <p>Committed stage - After a transaction execution is completed successfully the transaction is in a committed state. All changes made to the database are permanently documented.</p> </li> <li> <p>Failed state - If a transaction is aborted while in the active state, or if one of the checks fails, the transaction is in the failed state.</p> </li> <li> <p>Terminated state - This state happens once the transaction leaving the system cannot be restarted once again.</p> </li> </ol>"},{"location":"dbms/Unit4/#transaction-concepts","title":"Transaction Concepts","text":""},{"location":"dbms/Unit4/#transaction","title":"Transaction","text":"<ul> <li> <p>The transaction is a set of logically related operation. It contains a group of tasks.</p> </li> <li> <p>A transaction is an action or series of actions. It is performed by a single user to perform operations for accessing the contents of the database.</p> </li> </ul> <p>Example: Suppose an employee of bank transfers Rs 800 from X's account to Y's account. This small transaction contains several low-level tasks:</p> <p>X's Account</p> <p></p> <ol> <li> <p>Open_Account(X)</p> </li> <li> <p>Old_Balance\u00a0=\u00a0X.balance</p> </li> <li> <p>New_Balance\u00a0=\u00a0Old_Balance\u00a0-\u00a0800</p> </li> <li> <p>X.balance\u00a0=\u00a0New_Balance</p> </li> <li> <p>Close_Account(X)</p> </li> </ol> <p>Y's Account</p> <p></p> <ol> <li> <p>Open_Account(Y)</p> </li> <li> <p>Old_Balance\u00a0=\u00a0Y.balance</p> </li> <li> <p>New_Balance\u00a0=\u00a0Old_Balance\u00a0+\u00a0800</p> </li> <li> <p>Y.balance\u00a0=\u00a0New_Balance</p> </li> <li> <p>Close_Account(Y)</p> </li> </ol>"},{"location":"dbms/Unit4/#operations-of-transaction","title":"Operations of Transaction:","text":"<p>Following are the main operations of transaction:</p> <p>Read(X): Read operation is used to read the value of X from the database and stores it in a buffer in main memory.</p> <p>Write(X): Write operation is used to write the value back to the database from the buffer.</p> <p>Let's take an example to debit transaction from an account which consists of following operations:</p> <p></p> <ol> <li> <p>1.\u00a0\u00a0R(X);</p> </li> <li> <p>2.\u00a0\u00a0X\u00a0=\u00a0X\u00a0-\u00a0500;</p> </li> <li> <p>3.\u00a0\u00a0W(X);</p> </li> </ol> <p>Let's assume the value of X before starting of the transaction is 4000.</p> <ul> <li> <p>The first operation reads X's value from database and stores it in a buffer.</p> </li> <li> <p>The second operation will decrease the value of X by 500. So buffer will contain 3500.</p> </li> <li> <p>The third operation will write the buffer's value to the database. So X's final value will be 3500.</p> </li> </ul> <p>But it may be possible that because of the failure of hardware, software or power, etc. that transaction may fail before finished all the operations in the set.</p> <p>For example: If in the above transaction, the debit transaction fails after executing operation 2 then X's value will remain 4000 in the database which is not acceptable by the bank.</p> <p>To solve this problem, we have two important operations:</p> <p>Commit: It is used to save the work done permanently.</p> <p>Rollback: It is used to undo the work done.</p>"},{"location":"dbms/Unit4/#properties-of-transaction","title":"Properties of Transaction","text":"<p>There are four main properties of a transaction represented in the acronym ACID. This referrs to <code>Atomicity</code>, <code>Consistency</code>, <code>Isolation</code>, and <code>Durability</code>.</p> <p></p> <ol> <li> <p>Atomicity - A transaction cannot be subdivided and can only be executed as a whole and is treated as an atomic unit. It is either all the operations are carried out or none are performed.</p> </li> <li> <p>Consistency - After any transaction is carried out in a database it should remain consistent. No transaction should affect the data residing in the database adversely.</p> </li> <li> <p>Isolation - When several transactions need to be conducted in a database at the same time, each transaction is treated as if it were a single transaction. As a result, the completion of a single transaction should have no bearing on the completion of additional transactions.</p> </li> <li> <p>Durability - From durable, all changes made must be permanent such that once the transaction is committed the effects of the transaction cannot be reversed. In case of system failure or unexpected shutdown and changes made by a complete transaction are not written to the disk, during restart the changes should be remembered and restored.</p> </li> </ol>"},{"location":"dbms/Unit4/#serializabity-of-transactions","title":"Serializabity of transactions","text":"<p>In the field of computer science, serializability is a term that is a property of the system that describes how the different process operates the shared data. If the result given by the system is similar to the operation performed by the system, then in this situation, we call that system serializable. Here the cooperation of the system means there is no overlapping in the execution of the data. In DBMS, when the data is being written or read then, the DBMS can stop all the other processes from accessing the data.</p> <p>Thus, serializability is the system's property that describes how the different process operates the shared data. In DBMS, the overall Serializable property is adopted by locking the data during the execution of other processes. Also, serializability ensures that the final result is equivalent to the sequential operation of the data.</p>"},{"location":"dbms/Unit4/#types-of-serializability","title":"Types of Serializability","text":"<p>In DBMS, all the transaction should be arranged in a particular order, even if all the transaction is concurrent. If all the transaction is not serializable, then it produces the incorrect result.</p> <p>In DBMS, there are different types of serializable. Each type of serializable has some advantages and disadvantages. The two most common types of serializable are view serializability and conflict serializability.</p>"},{"location":"dbms/Unit4/#1-conflict-serializability","title":"1. Conflict Serializability","text":"<ul> <li> <p>Conflict serializability is a type of conflict operation in serializability that operates the same data item that should be executed in a particular order and maintains the consistency of the database. In DBMS, each transaction has some unique value, and every transaction of the database is based on that unique value of the database.</p> </li> <li> <p>This unique value ensures that no two operations having the same conflict value are executed concurrently. For example, let's consider two examples, i.e., the order table and the customer table. One customer can have multiple orders, but each order only belongs to one customer. There is some condition for the conflict serializability of the database. These are as below.</p> </li> <li> <p>Both operations should have different transactions.</p> </li> <li> <p>Both transactions should have the same data item.</p> </li> <li> <p>There should be at least one write operation between the two operations.</p> </li> </ul> <p>If there are two transactions that are executed concurrently, one operation has to add the transaction of the first customer, and another operation has added by the second operation. This process ensures that there would be no inconsistency in the database.</p>"},{"location":"dbms/Unit4/#2-view-serializability","title":"2. View Serializability","text":"<ul> <li> <p>View serializability is a type of operation in the serializable in which each transaction should produce some result and these results are the output of proper sequential execution of the data item. Unlike conflict serialized, the view serializability focuses on preventing inconsistency in the database. In DBMS, the view serializability provides the user to view the database in a conflicting way.</p> </li> <li> <p>In DBMS, we should understand schedules S1 and S2 to understand view serializability better. These two schedules should be created with the help of two transactions T1 and T2. To maintain the equivalent of the transaction each schedule has to obey the three transactions. These three conditions are as follows.</p> </li> <li> <p>The first condition is each schedule has the same type of transaction. The meaning of this condition is that both schedules S1 and S2 must not have the same type of set of transactions. If one schedule has committed the transaction but does not match the transaction of another schedule, then the schedule is not equivalent to each other.</p> </li> <li> <p>The second condition is that both schedules should not have the same type of read or write operation. On the other hand, if schedule S1 has two write operations while schedule S2 has one write operation, we say that both schedules are not equivalent to each other. We may also say that there is no problem if the number of the read operation is different, but there must be the same number of the write operation in both schedules.</p> </li> <li> <p>The final and last condition is that both schedules should not have the same conflict. Order of execution of the same data item. For example, suppose the transaction of schedule S1 is T1, and the transaction of schedule S2 is T2. The transaction T1 writes the data item A, and the transaction T2 also writes the data item A. in this case, the schedule is not equivalent to each other. But if the schedule has the same number of each write operation in the data item then we called the schedule equivalent to each other.</p> </li> </ul>"},{"location":"dbms/Unit4/#benefits-of-serializability-in-dbms","title":"Benefits of Serializability in DBMS","text":"<ol> <li> <p>Predictable execution: In serializable, all the threads of the DBMS are executed at one time. There are no such surprises in the DBMS. In DBMS, all the variables are updated as expected, and there is no data loss or corruption.</p> </li> <li> <p>Easier to Reason about &amp; Debug: In DBMS all the threads are executed alone, so it is very easier to know about each thread of the database. This can make the debugging process very easy. So we don't have to worry about the concurrent process.</p> </li> <li> <p>Reduced Costs: With the help of serializable property, we can reduce the cost of the hardware that is being used for the smooth operation of the database. It can also reduce the development cost of the software.</p> </li> <li> <p>Increased Performance:In some cases, serializable executions can perform better than their non-serializable counterparts since they allow the developer to optimize their code for performance.</p> </li> </ol>"},{"location":"dbms/Unit4/#two-phase-commit-protocol","title":"Two-Phase Commit Protocol","text":"<p>Two-phase commit (2PC) is a standardized protocol that ensures atomicity, consistency, isolation and durability (ACID) of a transaction; it is an atomic commitment protocol for distributed systems.</p> <p>In a distributed system, transactions involve altering data on multiple databases or resource managers, causing the processing to be more complicated since the database has to coordinate the committing or rolling back of changes in a transaction as a self-contained unit; either the entire transaction commits or the entire transaction rolls back.</p> <p>A transaction manager uses 2PC to ensure data integrity as well as the integrity of the global database -- the collection of databases participating in the transaction -- as well as monitor the commitment or rollback of the distributed transactions. This protocol is entirely transparent and requires no programming by the user or application developer.</p>"},{"location":"dbms/Unit4/#working-of-2pc","title":"Working of 2PC:","text":"<p>In order for a distributed transaction to take place, a special object, known as a coordinator, is required. The coordinator is in charge or arranging activities and synchronizations between distributed servers.</p> <p>As the name implies, 2PC consists of two phases:</p>"},{"location":"dbms/Unit4/#phase-1-the-prepare-phase-","title":"Phase 1 (the prepare phase) -","text":"<p>The protocol ensures all resource managers have saved the transaction's updates to stable storage. Every server that is required to commit writes its data records in a log. If a server is unsuccessful in doing so, then it responds with a failure message; if it is successful, then it sends an OK message.</p> <p>In this first phase, the initiating node requests all other participating nodes to promise to either commit or roll back the transaction.</p> <p>There are three types of responses that the responding node can send back:</p> <ul> <li> <p>Prepared - A prepared response is given when data in the node has been revised by a statement in the distributed transaction and the node has successfully composed itself for commitment or rollback. The prepared response also ensures that locks held for the transaction can survive a failure.</p> </li> <li> <p>Read-only - A read-only response means that data on the node has been queried, but it cannot be modified. Therefore, no preparation is necessary.</p> </li> <li> <p>Abort - An abort response indicates that the node cannot successfully prepare itself for commitment.</p> </li> </ul> <p>In order for the prepare phase to reach completion and one of the three messages to be sent, each node, except for the commit point site, must perform several steps. First, the node must request that the following referenced nodes are ready to commit. Then the node checks if the transaction changes data on itself or the subsequent nodes. If the data does not change, then the node skips the rest of the steps and replies with the read-only response.</p> <p>If the data does change, then the node assigns the resources it needs to commit the transaction. The node will save redo records matching the changes made by the transaction to its redo log. A lock is then placed on the modified tables to prevent them from being read.</p> <p>Next, the node ensures that locks held for the transaction can survive a failure. If all steps go according to plan, then the node issues a prepared response. However, if the attempts of the node, or one of its subsequent nodes, are unsuccessful in preparing to commit, then it issues the abort response.</p> <p>Prepared nodes then wait for either a commit or rollback response from the global coordinator. The prepared nodes are considered to be in-doubt until all changes are either committed or rolled back.</p>"},{"location":"dbms/Unit4/#phase-2-the-commit-phase-","title":"Phase 2 (the commit phase) -","text":"<p>If phase one is successful and all participants send an OK response, then phase two tells all resource managers to commit. After committing, each node logs its commit in a record and sends the coordinator a message indicating that its commit was successful. If phase one fails, then phase two tells the resource managers to abort, all servers roll back and each node sends feedback that the rollback has been successfully accomplished.</p> <p>The commit phase can be broken down into the following steps:</p> <ul> <li> <p>The global coordinator prompts the commit point site to commit and the action is performed.</p> </li> <li> <p>The commit point site records its commitment and sends a response back to the global coordinator, informing that it has successfully committed.</p> </li> <li> <p>The global and local coordinators instruct all other nodes to commit to the transaction.</p> </li> <li> <p>Each node's database releases its locks and commits its local portion of the distributed transaction.</p> </li> <li> <p>Each node's database registers an additional redo entry in its local log to show that is has committed the transaction.</p> </li> <li> <p>All participating nodes alert the global coordinator to the status of their successful commitment.</p> </li> </ul> <p>Once the commit phase is complete, all nodes in the distributed system possess consistent data.</p>"},{"location":"dbms/Unit4/#deadlock","title":"Deadlock","text":"<p>Deadlock in DBMS</p> <p>A deadlock is a condition where two or more transactions are waiting indefinitely for one another to give up locks. Deadlock is said to be one of the most feared complications in DBMS as no task ever gets finished and is in waiting state forever.</p> <p>For example: In the student table, transaction T1 holds a lock on some rows and needs to update some rows in the grade table. Simultaneously, transaction T2 holds locks on some rows in the grade table and needs to update the rows in the Student table held by Transaction T1.</p> <p>Now, the main problem arises. Now Transaction T1 is waiting for T2 to release its lock and similarly, transaction T2 is waiting for T1 to release its lock. All activities come to a halt state and remain at a standstill. It will remain in a standstill until the DBMS detects the deadlock and aborts one of the transactions.</p> <p></p>"},{"location":"dbms/Unit4/#deadlock-avoidance","title":"Deadlock Avoidance","text":"<ul> <li> <p>When a database is stuck in a deadlock state, then it is better to avoid the database rather than aborting or restating the database. This is a waste of time and resource.</p> </li> <li> <p>Deadlock avoidance mechanism is used to detect any deadlock situation in advance. A method like \"wait for graph\" is used for detecting the deadlock situation but this method is suitable only for the smaller database. For the larger database, deadlock prevention method can be used.</p> </li> </ul>"},{"location":"dbms/Unit4/#deadlock-detection","title":"Deadlock Detection","text":"<p>In a database, when a transaction waits indefinitely to obtain a lock, then the DBMS should detect whether the transaction is involved in a deadlock or not. The lock manager maintains a Wait for the graph to detect the deadlock cycle in the database.</p>"},{"location":"dbms/Unit4/#wait-for-graph","title":"Wait for Graph","text":"<ul> <li> <p>This is the suitable method for deadlock detection. In this method, a graph is created based on the transaction and their lock. If the created graph has a cycle or closed loop, then there is a deadlock.</p> </li> <li> <p>The wait for the graph is maintained by the system for every transaction which is waiting for some data held by the others. The system keeps checking the graph if there is any cycle in the graph.</p> </li> </ul> <p>The wait for a graph for the above scenario is shown below:</p> <p></p> <p>Deadlock Prevention</p> <ul> <li> <p>Deadlock prevention method is suitable for a large database. If the resources are allocated in such a way that deadlock never occurs, then the deadlock can be prevented.</p> </li> <li> <p>The Database management system analyzes the operations of the transaction whether they can create a deadlock situation or not. If they do, then the DBMS never allowed that transaction to be executed.</p> </li> </ul>"},{"location":"dbms/Unit4/#wait-die-scheme","title":"Wait-Die scheme","text":"<p>In this scheme, if a transaction requests for a resource which is already held with a conflicting lock by another transaction then the DBMS simply checks the timestamp of both transactions. It allows the older transaction to wait until the resource is available for execution.</p> <p>Let's assume there are two transactions Ti and Tj and let TS(T) is a timestamp of any transaction T. If T2 holds a lock by some other transaction and T1 is requesting for resources held by T2 then the following actions are performed by DBMS:</p> <ol> <li> <p>Check if TS(Ti) &lt; TS(Tj) - If Ti is the older transaction and Tj has held some resource, then Ti is allowed to wait until the data-item is available for execution. That means if the older transaction is waiting for a resource which is locked by the younger transaction, then the older transaction is allowed to wait for resource until it is available.</p> </li> <li> <p>Check if TS(T~i~) &lt; TS(Tj) - If Ti is older transaction and has held some resource and if Tj is waiting for it, then Tj is killed and restarted later with the random delay but with the same timestamp.</p> </li> </ol>"},{"location":"dbms/Unit4/#wound-wait-scheme","title":"Wound wait scheme","text":"<ul> <li> <p>In wound wait scheme, if the older transaction requests for a resource which is held by the younger transaction, then older transaction forces younger one to kill the transaction and release the resource. After the minute delay, the younger transaction is restarted but with the same timestamp.</p> </li> <li> <p>If the older transaction has held a resource which is requested by the Younger transaction, then the younger transaction is asked to wait until older releases it.</p> </li> </ul>"},{"location":"dbms/Unit4/#two-phase-locking-protocol","title":"Two-Phase Locking Protocol","text":"<ul> <li> <p>The two-phase locking protocol divides the execution phase of the transaction into three parts.</p> </li> <li> <p>In the first part, when the execution of the transaction starts, it seeks permission for the lock it requires.</p> </li> <li> <p>In the second part, the transaction acquires all the locks. The third phase is started as soon as the transaction releases its first lock.</p> </li> <li> <p>In the third phase, the transaction cannot demand any new locks. It only releases the acquired locks.</p> </li> </ul> <p></p> <p>There are two phases of 2PL:</p> <p>Growing phase: In the growing phase, a new lock on the data item may be acquired by the transaction, but none can be released.</p> <p>Shrinking phase: In the shrinking phase, existing lock held by the transaction may be released, but no new locks can be acquired.</p> <p>In the below example, if lock conversion is allowed then the following phase can happen:</p> <ol> <li> <p>Upgrading of lock (from S(a) to X (a)) is allowed in growing phase.</p> </li> <li> <p>Downgrading of lock (from X(a) to S(a)) must be done in shrinking phase.</p> </li> </ol> <p>Example:</p> <p></p> <p>The following way shows how unlocking and locking work with 2-PL.</p> <p>Transaction T1:</p> <ul> <li> <p>Growing phase: from step 1-3</p> </li> <li> <p>Shrinking phase: from step 5-7</p> </li> <li> <p>Lock point: at 3</p> </li> </ul> <p>Transaction T2:</p> <ul> <li> <p>Growing phase: from step 2-6</p> </li> <li> <p>Shrinking phase: from step 8-9</p> </li> <li> <p>Lock point: at 6</p> </li> </ul>"},{"location":"dbms/Unit4/#strict-two-phase-locking-strict-2pl","title":"Strict Two-phase locking (Strict-2PL)","text":"<ul> <li> <p>The first phase of Strict-2PL is similar to 2PL. In the first phase, after acquiring all the locks, the transaction continues to execute normally.</p> </li> <li> <p>The only difference between 2PL and strict 2PL is that Strict-2PL does not release a lock after using it.</p> </li> <li> <p>Strict-2PL waits until the whole transaction to commit, and then it releases all the locks at a time.</p> </li> <li> <p>Strict-2PL protocol does not have shrinking phase of lock release.</p> </li> </ul> <p></p>"},{"location":"dbms/Unit4/#cursors","title":"CursorsExplicit CursorsImplicit Cursors","text":"<p>In database systems, cursors are temporary work areas created in system memory when executing Data Manipulation Language (DML) statements. Cursors can contain multiple rows of data, but typically, only one row is processed at a time. Cursors are useful in various databases, including Oracle, SQL Server, MySQL, etc. They are often used with DML statements like UPDATE, INSERT, and DELETE. Cursors can be categorized into two types:</p> <ul> <li>Implicit cursors</li> <li>Explicit cursors</li> </ul> <p>Explicit cursors are defined by programmers to have more control over the result set. They must be declared in the declaration section of a PL/SQL block and are typically used with SELECT statements that return multiple rows. The steps involved in creating an explicit cursor are as follows:</p> <ol> <li>Cursor Declaration: Initialize the memory for the cursor.</li> <pre>\n\n\u00a0 \u00a0 <code>CURSOR &lt;cursorName&gt; IS\n\n\u00a0 \u00a0 \u00a0 \u00a0 SELECT &lt;Required fields&gt; FROM &lt;tableName&gt;;</code>\n\n\u00a0 \u00a0 </pre> <li>Cursor Opening: Allocate memory for the cursor.</li> <pre>\n\n\u00a0 \u00a0 <code>OPEN &lt;cursorName&gt;;</code>\n\n\u00a0 \u00a0 </pre> <li>Cursor Fetching: Retrieve data from the cursor.</li> <pre>\n\n\u00a0 \u00a0 <code>FETCH &lt;cursorName&gt; INTO &lt;Respective columns&gt;;</code>\n\n\u00a0 \u00a0 </pre> <li>Cursor Closing: Release the allocated memory.</li> <pre>\n\n\u00a0 \u00a0 <code>CLOSE &lt;cursorName&gt;;</code>\n\n\u00a0 \u00a0 </pre> </ol> Example <p>Consider a table \"employees\" with columns EMPLOYEEID, EMPLOYEENAME, and EMPLOYEECITY. Here's an example of using an explicit cursor to retrieve and display employee details:</p> <pre>\n\n<code>\n\nDECLARE\n\n\u00a0 \u00a0empId employees.EMPLOYEEID%type;\n\n\u00a0 \u00a0empName employees.EMPLOYEENAME%type;\n\n\u00a0 \u00a0empCity employees.EMPLOYEECITY%type;\n\n\u00a0 \u00a0CURSOR c_employees is\n\n\u00a0 \u00a0 \u00a0 SELECT EMPLOYEEID, EMPLOYEENAME, EMPLOYEECITY FROM employees;\n\nBEGIN\n\n\u00a0 \u00a0OPEN c_employees;\n\n\u00a0 \u00a0LOOP\n\n\u00a0 \u00a0 \u00a0 FETCH c_employees INTO empId , empName , empCity;\n\n\u00a0 \u00a0 \u00a0 EXIT WHEN c_employees %notfound;\n\n\u00a0 \u00a0 \u00a0 dbms_output.put_line(empId || ' ' || empName || ' ' || empCity);\n\n\u00a0 \u00a0END LOOP;\n\n\u00a0 \u00a0CLOSE c_employees;\n\nEND;\n\n</code>\n\n</pre> <p>Implicit cursors are used for DML statements, such as INSERT, UPDATE, and DELETE, as well as queries that return a single row. You don't need to declare an implicit cursor; it's automatically created. Implicit cursors are associated with cursor attributes that provide information about the execution of the most recently executed SQL statement. Common cursor attributes include:</p> <ul> <li><code>%FOUND</code>: Indicates whether a DML statement affected rows.</li> <li><code>%ISOPEN</code>: Always returns False for implicit cursors.</li> <li><code>%NOTFOUND</code>: Logical opposite of <code>%FOUND</code>.</li> <li><code>%ROWCOUNT</code>: Returns the number of rows affected by an INSERT, UPDATE, or DELETE statement.</li> </ul> Example <p>Consider a table \"tempory_employee\" and operations using implicit cursor attributes:</p> <pre>\n\n<code>\n\nCREATE TABLE tempory_employee AS SELECT * FROM employees;\n\nDECLARE\n\n\u00a0 employeeNo NUMBER(4) := 2;\n\nBEGIN\n\n\u00a0 DELETE FROM tempory_employee WHERE employeeId = employeeNo ;\n\n\u00a0 IF SQL%FOUND THEN\n\n\u00a0 \u00a0 INSERT INTO tempory_employee (employeeId,employeeName,employeeCity) VALUES (2, 'ZZZ', 'Delhi');\n\n\u00a0 END IF;\n\nEND;\n\n</code>\n\n</pre> <p>The cursor attributes can be used to track the results of DML statements and control the flow of your PL/SQL code.</p>"},{"location":"dbms/Unit4/#stored-procedures","title":"Stored Procedures","text":"<p>In SQL, a stored procedure is a set of statement(s) that perform some defined actions. We make stored procedures so that we can reuse statements that are used frequently.</p> <p>Stored procedures are thus similar to functions in programming. They can perform specified operations when we call them.</p>"},{"location":"dbms/Unit4/#creating-a-procedure","title":"Creating a Procedure","text":"<p>We create stored procedures using the <code>CREATE PROCEDURE</code> command followed by SQL commands. For example,</p> <p>SQL Server</p> <pre><code>\nCREATE PROCEDURE us_customers AS\n\nSELECT customer_id, first_name\n\nFROM Customers\n\nWHERE Country = 'USA';\n\n</code></pre> <p>PostgreSQL</p> <pre><code>\nCREATE PROCEDURE us_customers ()\n\nLANGUAGE SQL\n\nAS $$\n\nSELECT customer_id, first_name\n\nFROM Customers\n\nWHERE Country = 'USA';\n\n$$;\n\n</code></pre> <p>MySQL</p> <pre><code>\nDELIMITER //\n\nCREATE PROCEDURE us_customers ()\n\nBEGIN\n\nSELECT customer_id, first_name\n\nFROM Customers\n\nWHERE Country = 'USA';\n\nEND //\n\nDELIMITER ;\n\n</code></pre> <p>Oracle</p> <pre><code>\nCREATE PROCEDURE us_customers\n\nAS res SYS_REFCURSOR;\n\nBEGIN\n\nopen res for\n\nSELECT customer_id, first_name\n\nFROM Customers\n\nWHERE country = 'USA';\n\nDBMS_SQL.RETURN_RESULT(res);\n\nEND;\n\n</code></pre> <p>The commands above create a stored procedure named <code>us_customers</code> in various DBMS. This procedure selects the <code>customer_id</code> and <code>first_name</code> columns of those customers who live in the USA from the <code>Customers</code> table.</p>"},{"location":"dbms/Unit4/#executing-stored-procedure","title":"Executing Stored Procedure","text":"<p>Now, whenever we want to fetch all customers who live in the USA, we can simply call the procedure mentioned above. For example,</p> <p>SQL Server, Oracle</p> <pre><code>\nEXEC us_customers;\n\n</code></pre> <p>PostgreSQL, MySQL</p> <pre><code>\nCALL us_customers();\n\n</code></pre>"},{"location":"dbms/Unit4/#drop-procedure","title":"Drop Procedure","text":"<p>We can delete stored procedures by using the <code>DROP PROCEDURE</code> command. For example,</p> <p>SQL Server, PostgreSQL, MySQL</p> <pre><code>\nDROP PROCEDURE us_customers;\n\n</code></pre> <p>Here, the SQL</p>"},{"location":"dbms/Unit4/#stored-function","title":"Stored Function","text":"<p>===============</p> <p>A stored function in MySQL is a set of SQL statements that perform some task/operation and return a single value. It is one of the types of stored programs in MySQL. When you will create a stored function, make sure that you have a CREATE ROUTINE database privilege. Generally, we used this function to encapsulate the common business rules or formulas reusable in stored programs or SQL statements.</p> <p>The stored function is almost similar to the procedure in MySQL, but it has some differences that are as follows:</p> <ul> <li> <p>The function parameter may contain only the IN parameter but can't allow specifying this parameter, while the procedure can allow IN, OUT, INOUT parameters.</p> </li> <li> <p>The stored function can return only a single value defined in the function header.</p> </li> <li> <p>The stored function may also be called within SQL statements.</p> </li> <li> <p>It may not produce a result set.</p> </li> </ul> <p>Thus, we will consider the stored function when our program's purpose is to compute and return a single value only or create a user-defined function.</p> <p>The syntax of creating a stored function in MySQL is as follows:</p> <p></p> <p>1. \u00a0DELIMITER\u00a0$$</p> <p>2. \u00a0CREATE\u00a0FUNCTION\u00a0fun_name(fun_parameter(s))</p> <p>3. \u00a0RETURNS\u00a0datatype</p> <p>4. \u00a0[NOT]\u00a0{Characteristics}</p> <p>5. \u00a0fun_body;</p>"},{"location":"dbms/Unit4/#parameter-used","title":"Parameter Used","text":"<p>The stored function syntax uses the following parameters which are discussed below:</p> <p>| Parameter Name | Descriptions |</p> <p>| fun_name | It is the name of the stored function that we want to create in a database. It should not be the same as the built-in function name of MySQL. |</p> <p>| fun_parameter | It contains the list of parameters used by the function body. It does not allow to specify IN, OUT, INOUT parameters. |</p> <p>| datatype | It is a data type of return value of the function. It should any valid MySQL data type. |</p> <p>| characteristics | The CREATE FUNCTION statement only accepted when the characteristics (DETERMINISTIC, NO SQL, or READS SQL DATA) are defined in the declaration. |</p> <p>| fun_body | This parameter has a set of SQL statements to perform the operations. It requires at least one RETURN statement. When the return statement is executed, the function will be terminated automatically. The function body is given below: BEGIN -- SQL statements END $$ DELIMITER |</p>"},{"location":"dbms/Unit4/#mysql-stored-function-example","title":"MySQL Stored Function Example","text":"<p>Let us understand how stored function works in MySQL through the example. Suppose our database has a table named \"customer\" that contains the following data:</p> <p></p> <p>Now, we will create a function that returns the customer occupation based on the age using the below statement.</p> <p></p> <p>1. \u00a0DELIMITER\u00a0$$</p> <p>2. \u00a0CREATE\u00a0FUNCTION\u00a0Customer_Occupation(</p> <p>3. \u00a0age\u00a0int</p> <p>4. \u00a0)</p> <p>5. \u00a0RETURNS\u00a0VARCHAR(20)</p> <p>6. \u00a0DETERMINISTIC</p> <p>7. \u00a0BEGIN</p> <p>8. \u00a0DECLARE\u00a0customer_occupation\u00a0VARCHAR(20);</p> <p>9. \u00a0IF\u00a0age\u00a0&gt;\u00a035\u00a0THEN</p> <p>10. SET\u00a0customer_occupation\u00a0=\u00a0'Scientist';</p> <p>11. ELSEIF\u00a0(age\u00a0&lt;=\u00a035\u00a0AND</p> <p>12. age\u00a0&gt;=\u00a030)\u00a0THEN</p> <p>13. SET\u00a0customer_occupation\u00a0=\u00a0'Engineer';</p> <p>14. ELSEIF\u00a0age\u00a0&lt;\u00a030\u00a0THEN</p> <p>15. SET\u00a0customer_occupation\u00a0=\u00a0'Actor';</p> <p>16. END\u00a0IF;</p> <p>17. --\u00a0return\u00a0the\u00a0customer\u00a0occupation</p> <p>18. RETURN\u00a0(customer_occupation);</p> <p>19. END$$</p> <p>20. DELIMITER;</p> <p>Execute the above statement on the command-line tool, as shown below:</p> <p></p> <p>Once the function creation is successful, we can see it in the MySQL workbench under the Function section like below image:</p> <p></p> <p>We can also see all stored functions available in the current database using the following statement:</p> <p></p> <p>1. \u00a0SHOW\u00a0FUNCTION\u00a0STATUS\u00a0WHERE\u00a0db\u00a0=\u00a0'mysqltestdb';</p> <p>After executing the above command, we will get the output as below:</p> <p></p>"},{"location":"dbms/Unit4/#stored-function-call","title":"Stored Function Call","text":"<p>Now, we are going to see how stored function is called with the SQL statement. The following statement uses customer_occupation stored function to get the result:</p> <p></p> <p>1. \u00a0SELECT\u00a0name,\u00a0age,\u00a0Customer_Occupation(age)</p> <p>2. \u00a0FROM\u00a0customer\u00a0ORDER\u00a0BY\u00a0age;</p> <p>It will give the output as below.</p> <p></p> <p>We can also call the above function within another stored program, such as procedure, function, or trigger or any other MySQL built-in function.</p>"},{"location":"dbms/Unit4/#stored-function-call-in-procedure","title":"Stored Function Call in Procedure","text":"<p>Here, we are going to see how this function can be called in a stored procedure. This statement creates a procedure in a database that uses Customer_Occupation() stored function.</p> <p></p> <p>1. \u00a0DELIMITER\u00a0$$</p> <p>2. \u00a0CREATE\u00a0PROCEDURE\u00a0GetCustomerDetail()</p> <p>3. \u00a0BEGIN</p> <p>4. \u00a0SELECT\u00a0name,\u00a0age,\u00a0Customer_Occupation(age)\u00a0FROM\u00a0customer\u00a0ORDER\u00a0BY\u00a0age;</p> <p>5. \u00a0END$$</p> <p>6. \u00a0DELIMITER\u00a0;</p> <p>The below statement can be used to call the stored procedure:</p> <p></p> <p>1. \u00a0CALL\u00a0GetCustomerDetail();</p> <p>We will get the output as below:</p> <p></p>"},{"location":"dbms/Unit4/#trigger","title":"Trigger","text":"<p>Trigger</p> <p>A trigger is a statement that a database system executes automatically when there is any modification to the database. In a trigger, you specify when the trigger is to be executed and the action to be performed when the trigger executes. Triggers are used to specify certain integrity constraints and referential constraints that cannot be specified using the constraint mechanism of SQL.</p> <p>Example</p> <p>Suppose we are adding a tuple to the 'Donors' table, indicating that someone has donated blood. We can design a trigger that will automatically add the donated blood value to the 'Blood_record' table.</p> <p>Types of Triggers</p> <p>Triggers can be defined in six types for each table:</p> <p>1. AFTER INSERT: Activated after data is inserted into the table.</p> <p>2. AFTER UPDATE: Activated after data in the table is modified.</p> <p>3. AFTER DELETE: Activated after data is deleted/removed from the table.</p> <p>4. BEFORE INSERT: Activated before data is inserted into the table.</p> <p>5. BEFORE UPDATE: Activated before data in the table is modified.</p> <p>6. BEFORE DELETE: Activated before data is deleted/removed from the table.</p> <p>Examples showing implementation of Triggers</p> <p>1. Write a trigger to ensure that no employee under the age of 25 can be inserted into the database.</p> <pre><code>\nDELIMITER $$\n\nCREATE TRIGGER Check_age BEFORE INSERT ON employee\n\nFOR EACH ROW\n\nBEGIN\n\n\u00a0 \u00a0 IF NEW.age &lt; 25 THEN\n\n\u00a0 \u00a0 \u00a0 \u00a0 SIGNAL SQLSTATE '45000'\n\n\u00a0 \u00a0 \u00a0 \u00a0 SET MESSAGE_TEXT = 'ERROR: AGE MUST BE AT LEAST 25 YEARS!';\n\n\u00a0 \u00a0 END IF;\n\nEND;\n\n$$\n\nDELIMITER;\n</code></pre> <p>Explanation: This trigger named 'Check_age' checks the age attribute before inserting any tuple into the 'employee' table. If the age is less than 25, it raises an error message.</p> <p>2. Create a trigger that works before deletion in the 'employee' table and creates a duplicate copy of the record in another table 'employee_backup'.</p> <p>Before writing the trigger, we need to create the 'employee_backup' table.</p> <pre><code>CREATE TABLE employee_backup (\n\n\u00a0 \u00a0 employee_no INT,\n\n\u00a0 \u00a0 employee_name VARCHAR(40),\n\n\u00a0 \u00a0 job VARCHAR(40),\n\n\u00a0 \u00a0 hiredate DATE,\n\n\u00a0 \u00a0 salary INT,\n\n\u00a0 \u00a0 PRIMARY KEY (employee_no)\n\n);`\n\nNow, let's create the trigger:\n\n\n\n```sql\nDELIMITER $$\n\nCREATE TRIGGER Backup BEFORE DELETE ON employee\n\nFOR EACH ROW\n\nBEGIN\n\n\u00a0 \u00a0 INSERT INTO employee_backup\n\n\u00a0 \u00a0 VALUES (OLD.employee_no, OLD.name, OLD.job, OLD.hiredate, OLD.salary);\n\nEND;\n\n$$\n\nDELIMITER;\n</code></pre> <p>Explanation: This trigger named 'Backup' creates a backup copy of employee records in the 'employee_backup' table before any deletion operation in the 'employee' table.</p> <p>3. Write a trigger to count the number of new tuples inserted using each insert statement.</p> <p>sql</p> <pre><code>\nDECLARE count INT;\n\nSET count = 0;\n\nDELIMITER $$\n\nCREATE TRIGGER Count_tuples AFTER INSERT ON employee\n\nFOR EACH ROW\n\nBEGIN\n\n\u00a0 \u00a0 SET count = count + 1;\n\nEND;\n\n$$\n\nDELIMITER;\n\n</code></pre> <p>Explanation: This trigger named 'Count_tuples' keeps track of the number of new tuples inserted into the 'employee' table by incrementing the 'count' variable after each insertion.</p> <pre><code>\nPlease note that you should adapt the table and column names to your specific database schema when implementing these triggers\n\n</code></pre>"},{"location":"dbms/Unit4/#references","title":"References","text":"<ul> <li> <p>https://www.javatpoint.com/transactions-in-dbms</p> </li> <li> <p>https://www.geeksforgeeks.org/transaction-management/</p> </li> <li> <p>https://www.educba.com/transaction-control-language/</p> </li> <li> <p>https://www.section.io/engineering-education/transaction-management-in-database/</p> </li> <li> <p>https://www.geeksforgeeks.org/acid-properties-in-dbms/</p> </li> <li> <p>https://www.javatpoint.com/serializability-in-dbms</p> </li> <li> <p>https://www.techtarget.com/searchapparchitecture/definition/two-phase-commit-2PC</p> </li> <li> <p>https://www.javatpoint.com/deadlock-in-dbms</p> </li> <li> <p>https://www.geeksforgeeks.org/cursors-in-dbms-definition-types-attributes-uses/</p> </li> <li> <p>https://www.javatpoint.com/mysql-stored-function</p> </li> <li> <p>https://www.programiz.com/sql/stored-procedures</p> </li> </ul>"},{"location":"eeim/","title":"Engineering Economics &amp; Industrial Management","text":""},{"location":"eeim/#syllabus","title":"Syllabus","text":"Unit Topic Hours Unit I Demand, Utility, and Indifference curves 7 - Approach to Analysis of demand - Elasticity of demand - Measure of demand elasticity - Factors of Production - Advertising elasticity Market and Market Structures - Price and output determination under - Perfect competition - Monopolistic competition - Oligopoly - Monopoly - Depreciation and methods for its determination Unit II Functions of central and commercial banks 6 - Inflation - Deflation - Stagflation - Direct and Indirect Taxes - New economic policy - Liberalization - Globalization - Privatization - Monetary &amp; Fiscal policies of the government - Meaning and phases of business cycles Unit III Definition, nature, and scope of Management 5 - Functions of management - Planning - Organizing - Directing - Controlling - Principles of management - Communication Unit IV Meaning of Marketing management 7 - Concepts of marketing - Marketing Mix - Service Marketing - Product Life Cycle - New Product Development - Pricing strategies - Channels of distribution - Promotion Mix Unit V Meaning, nature, and scope of Financial Management 5 - Sources of Financing - Ratio Analysis - Time value of money"},{"location":"sepm/","title":"Software Engineering &amp; Project Management","text":""},{"location":"sepm/#syllabus","title":"Syllabus","text":"Unit Topic Hours Unit I INTRODUCTION TO SOFTWARE PROCESS 8 - Introduction to Software Engineering - Software Process - Perspective and Specialized Process Models - Software Project Management - Estimation (LOC and FP Based Estimation) - COCOMO Model - Project Scheduling - Earned Value Analysis - Risk Management Unit II REQUIREMENTS ANALYSIS AND SPECIFICATION 8 - Software Requirements (Functional and Non-Functional) - User requirements - System requirements - Software Requirements Document - Requirement Engineering Process - Feasibility Studies - Requirements elicitation and analysis - Requirements validation - Requirements management - Classical analysis (Structured system Analysis, Petri Nets, Data Dictionary) Unit III SOFTWARE DESIGN 8 - Design process - Design Concepts - Design Model - Design Heuristic - Architectural Design - Architectural styles - Architectural Mapping using Data Flow - User Interface Design - Component level Design (Class based components, traditional Components) Unit IV [TESTING AND IMPLEMENTATION] (Unit4.md) 8 - Software testing fundamentals - Internal and external views of Testing - White box testing (basis path testing, control structure testing) - Black box testing - Regression Testing - Unit Testing - Integration Testing - Validation Testing - System Testing and Debugging - Software Implementation Techniques (Coding practices, Refactoring) Unit V PROJECT MANAGEMENT 8 - Estimation (FP Based, LOC Based) - Make/Buy Decision - COCOMO II Planning - Project Plan - Planning Process - RFP Risk Management (Identification, Projection, RMMM) - Scheduling and Tracking - Relationship between people and effort - Task Set &amp; Network - EVA Process and Project Metrics - Recent trends in software engineering (Agile methodology, scrum, pair programming)"},{"location":"sepm/#question-bank-with-answers","title":"Question Bank with Answers","text":"<ul> <li>CAE - 1</li> <li>CAE - 2</li> <li>CAE - 3</li> <li>ESE</li> </ul>"},{"location":"sepm/Unit1/","title":"Unit 1","text":"<p>jhf</p>"},{"location":"sepm/Unit3/","title":"Unit 3 : Software Design","text":"<p>Syllabus</p> <ul> <li> <p>Design process</p> </li> <li> <p>Design Concepts</p> </li> <li> <p>Design Model</p> </li> <li> <p>Design Heuristic</p> </li> <li> <p>Architectural Design</p> </li> <li> <p>Architectural styles</p> </li> <li> <p>Architectural Mapping using Data Flow</p> </li> <li> <p>User Interface Design</p> </li> <li> <p>Component level Design (Class based components, traditional Components)</p> </li> </ul>"},{"location":"sepm/Unit3/#design-process","title":"Design Process","text":"<p>Software design process is a mechanism to transform user requirements into some suitable form, which helps the programmer in software coding and implementation. It deals with representing the client's requirement, as described in SRS (Software Requirement Specification) document, into a form, i.e., easily implementable using programming language.</p>"},{"location":"sepm/Unit3/#objectives-of-software-design","title":"Objectives of Software Design","text":"<p>Following are the purposes of Software design:</p> <ol> <li>Correctness:Software design should be correct as per requirement.</li> <li>Completeness:The design should have all components like data structures, modules, and external interfaces, etc.</li> <li>Efficiency:Resources should be used efficiently by the program.</li> <li>Flexibility:Able to modify on changing needs.</li> <li>Consistency:There should not be any inconsistency in the design.</li> <li>Maintainability: The design should be so simple so that it can be easily maintainable by other designers.</li> </ol>"},{"location":"sepm/Unit3/#design-concepts","title":"Design Concepts:","text":""},{"location":"sepm/Unit3/#-modularization","title":"- Modularization","text":"<p>Modularization is a technique to divide a software system into multiple discrete and independent modules, which are expected to be capable of carrying out task(s) independently. These modules may work as basic constructs for the entire software. Designers tend to design modules such that they can be executed and/or compiled separately and independently.</p> <p>Modular design unintentionally follows the rules of \u2018divide and conquer\u2019 problem-solving strategy this is because there are many other benefits attached with the modular design of a software.</p> <p>Advantage of modularization:</p> <ul> <li>Smaller components are easier to maintain</li> <li>Program can be divided based on functional aspects</li> <li>Desired level of abstraction can be brought in the program</li> <li>Components with high cohesion can be re-used again</li> <li>Concurrent execution can be made possible</li> <li>Desired from security aspect</li> </ul>"},{"location":"sepm/Unit3/#-concurrency","title":"- Concurrency","text":"<p>In software design, concurrency is implemented by splitting the software into multiple independent units of execution, like modules and executing them in parallel. In other words, concurrency provides capability to the software to execute more than one part of code in parallel to each other.</p> <p>It is necessary for the programmers and designers to recognize those modules, which can be made parallel execution.</p>"},{"location":"sepm/Unit3/#-coupling","title":"- Coupling","text":"<p>Coupling is a measure that defines the level of inter-dependability among modules of a program. It tells at what level the modules interfere and interact with each other. The lower the coupling, the better the program.</p> <p>There are five levels of coupling, namely -</p> <ul> <li>Content coupling - When a module can directly access or modify or refer to the content of another module, it is called content level coupling.</li> <li>Common coupling- When multiple modules have read and write access to some global data, it is called common or global coupling.</li> <li>Control coupling- Two modules are called control-coupled if one of them decides the function of the other module or changes its flow of execution.</li> <li>Stamp coupling- When multiple modules share common data structure and work on different part of it, it is called stamp coupling.</li> <li>Data coupling- Data coupling is when two modules interact with each other by means of passing data (as parameter). If a module passes data structure as parameter, then the receiving module should use all its components.</li> </ul>"},{"location":"sepm/Unit3/#-cohesion","title":"- Cohesion","text":"<p>Cohesion is a measure that defines the degree of intra-dependability within elements of a module. The greater the cohesion, the better is the program design.</p> <p>There are seven types of cohesion, namely \u2013</p> <ul> <li>Co-incidental cohesion - It is unplanned and random cohesion, which might be the result of breaking the program into smaller modules for the sake of modularization. Because it is unplanned, it may serve confusion to the programmers and is generally not-accepted.</li> <li>Logical cohesion - When logically categorized elements are put together into a module, it is called logical cohesion.</li> <li>Temporal Cohesion - When elements of module are organized such that they are processed at a similar point in time, it is called temporal cohesion.</li> <li>Procedural cohesion - When elements of module are grouped together, which are executed sequentially in order to perform a task, it is called procedural cohesion.</li> <li>Communicational cohesion - When elements of module are grouped together, which are executed sequentially and work on same data (information), it is called communicational cohesion.</li> <li>Sequential cohesion - When elements of module are grouped because the output of one element serves as input to another and so on, it is called sequential cohesion.</li> <li>Functional cohesion - It is considered to be the highest degree of cohesion, and it is highly expected. Elements of module in functional cohesion are grouped because they all contribute to a single well-defined function. It can also be reused.</li> </ul>"},{"location":"sepm/Unit3/#design-model","title":"Design Model","text":"<p>Design modeling in software engineering represents the features of the software that helps engineer to develop it effectively, the architecture, the user interface, and the component level detail. Design modeling provides a variety of different views of the system like architecture plan for home or building. Different methods like data-driven, pattern-driven, or object-oriented methods are used for constructing the design model. All these methods use set of design principles for designing a model. Designing a model is an important phase and is a multi-process that represent the data structure, program structure, interface characteristic, and procedural details. It is mainly classified into four categories \u2013 Data design, architectural design, interface design, and component-level design.</p> <ul> <li>Data design: It represents the data objects and their interrelationship in an entity-relationship diagram. Entity-relationship consists of information required for each entity or data objects as well as it shows the relationship between these objects. It shows the structure of the data in terms of the tables. It shows three type of relationship \u2013 One to one, one to many, and many to many. In one to one relation, one entity is connected to another entity. In one many relation, one Entity is connected to more than one entity. un many to many relations one entity is connected to more than one entity as well as other entity also connected with first entity using more than one entity.</li> <li>Architectural design: It defines the relationship between major structural elements of the software. It is about decomposing the system into interacting components. It is expressed as a block diagram defining an overview of the system structure \u2013 features of the components and how these components communicate with each other to share data. It defines the structure and properties of the component that are involved in the system and also the inter-relationship among these components.</li> <li>User Interfaces design: It represents how the Software communicates with the user i.e. the behavior of the system. It refers to the product where user interact with controls or displays of the product. For example, Military, vehicles, aircraft, audio equipment, computer peripherals are the areas where user interface design is implemented. UI design becomes efficient only after performing usability testing. This is done to test what works and what does not work as expected. Only after making the repair, the product is said to have an optimized interface.</li> <li>Component level design: It transforms the structural elements of the software architecture into a procedural description of software components. It is a perfect way to share a large amount of data. Components need not be concerned with how data is managed at a centralized level i.e. components need not worry about issues like backup and security of the data.</li> </ul>"},{"location":"sepm/Unit3/#design-heuristic","title":"Design Heuristic","text":"<p>The main goal of heuristic evaluations is to identify any problems associated with the design of user interfaces. A heuristic, or heuristic technique, is any approach to problem solving or self-discovery that employs a practical method that is not guaranteed to be optimal, perfect, or rational, but is nevertheless sufficient for reaching an immediate, short-term goal or approximation.</p> <p>The simplicity of heuristic evaluation is beneficial at the early stages of design. This usability inspection method does not require user testing which can be burdensome due to the need for users, a place to test them and a payment for their time. Heuristic evaluation requires only one expert, reducing the complexity and expended time for evaluation.</p>"},{"location":"sepm/Unit3/#principles-of-design-heuristic","title":"Principles of Design Heuristic","text":"<p>Automate unwanted workload:</p> <ul> <li> <p>free cognitive resources for high-level tasks.</p> </li> <li> <p>eliminate mental calculations, estimations, comparisons, and unnecessary thinking.</p> </li> </ul> <p>\u00b7 Reduce uncertainty:</p> <ul> <li>display data in a manner that is clear and obvious.</li> </ul> <p>\u00b7 Fuse data:</p> <ul> <li>reduce cognitive load by bringing together lower level data into a higher-level summation.</li> </ul> <p>Present new information with meaningful aids to interpretation:</p> <ul> <li> <p>use a familiar framework, making it easier to absorb.</p> </li> <li> <p>use everyday terms, metaphors, etc.</p> </li> </ul> <p>Use names that are conceptually related to function:</p> <ul> <li> <p>Context-dependent.</p> </li> <li> <p>Attempt to improve recall and recognition.</p> </li> <li> <p>Group data in consistently meaningful ways to decrease search time.</p> </li> </ul> <p>Limit data-driven tasks:</p> <ul> <li> <p>Reduce the time spent assimilating raw data.</p> </li> <li> <p>Make appropriate use of color and graphics.</p> </li> </ul>"},{"location":"sepm/Unit3/#architectural-design","title":"Architectural Design","text":"<p>The architecture is not the operational software. Rather, it is a representation that enables a software engineer to:</p> <p>(1) Analyze the effectiveness of the design in meeting its stated requirements,</p> <p>(2) Consider architectural alternatives at a stage when making design changes is still relatively easy, and</p> <p>(3) Reduce the risks associated with the construction of the software.</p> <p>Software architecture is the high level structure of a software system, the discipline of creating such structures, and the documentation of these structures. It is the set of structures needed to reason about the software system, and comprises the software elements, the relations between them, and the properties of both elements and relations.</p>"},{"location":"sepm/Unit3/#software-architecture-exhibits-the-following","title":"Software architecture exhibits the following:","text":"<ul> <li> <p>Multitude of stakeholders: software systems have to cater to a variety of stakeholders such as business managers, owners, users and operators. These stakeholders all have their own concerns with respect to the system. Balancing these concerns and demonstrating how they are addressed is part of designing the system.This implies that architecture involves dealing with a broad variety of concerns and stakeholders, and has a multidisciplinary nature.</p> </li> <li> <p>Separation of concerns: the established way for architects to reduce complexity is by separating the concerns that drive the design. Architecture documentation shows that all stakeholder concerns are addressed by modeling and describing the architecture from separate points of view associated with the various stakeholder concerns. These separate descriptions are called architectural views (see for example the 4+1 Architectural View Model).</p> </li> <li> <p>Quality-driven: classic software design approaches (e.g. Jackson Structured Programming) were driven by required functionality and the flow of data through the system, but the current insight is that the architecture of a software system is more closely related to its quality attributes such as fault-tolerance, backward compatibility, extensibility, reliability, maintainability, availability, security, usability, and other such \u2013ilities. Stakeholder concerns often translate into requirements on these quality attributes, which are variously called non-functional requirements, extra-functional requirements, behavioral requirements, or quality attribute requirements.</p> </li> <li> <p>Recurring styles: like building architecture, the software architecture discipline has developed standard ways to address recurring concerns. These \u201cstandard ways\u201d are called by various names at various levels of abstraction. Common terms for recurring solutions are architectural style, strategy or tactic, reference architecture and architectural pattern.</p> </li> <li> <p>Conceptual integrity: a term introduced by Fred Brooks in The Mythical Man-Month to denote the idea that the architecture of a software system represents an overall vision of what it should do and how it should do it. This vision should be separated from its implementation. The architect assumes the role of \u201ckeeper of the vision\u201d, making sure that additions to the system are in line with the architecture, hence preserving conceptual integrity.</p> </li> </ul>"},{"location":"sepm/Unit3/#architectural-styles","title":"Architectural styles","text":"<p>The software needs the architectural design to represents the design of software. IEEE defines architectural design as \u201cthe process of defining a collection of hardware and software components and their interfaces to establish the framework for the development of a computer system.\u201d The software that is built for computer-based systems can exhibit one of these many architectural styles. Each style will describe a system category that consists of :</p> <ul> <li>A set of components(eg: a database, computational modules) that will perform a function required by the system.</li> <li>The set of connectors will help in coordination, communication, and cooperation between the components.</li> <li>Conditions that how components can be integrated to form the system.</li> <li>Semantic models that help the designer to understand the overall properties of the system.</li> </ul> <p>The use of architectural styles is to establish a structure for all the components of the system.</p>"},{"location":"sepm/Unit3/#taxonomy-of-architectural-styles","title":"Taxonomy of Architectural styles:","text":"<p>1] Data centered architectures:</p> <ul> <li>A data store will reside at the center of this architecture and is accessed frequently by the other components that update, add, delete or modify the data present within the store.</li> <li>The figure illustrates a typical data centered style. The client software access a central repository. Variation of this approach are used to transform the repository into a blackboard when data related to client or data of interest for the client change the notifications to client software.</li> <li>This data-centered architecture will promote integrability. This means that the existing components can be changed and new client components can be added to the architecture without the permission or concern of other clients.</li> <li>Data can be passed among clients using blackboard mechanism.</li> </ul> <p>Advantage of Data centered architecture</p> <ul> <li>Repository of data is independent of clients</li> <li>Client work independent of each other</li> <li>It may be simple to add additional clients.</li> <li>Modification can be very easy</li> </ul> <p></p> <p>Data centered architecture</p> <p>2] Data flow architectures:</p> <ul> <li>This kind of architecture is used when input data is transformed into output data through a series of computational manipulative components.</li> <li>The figure represents pipe-and-filter architecture since it uses both pipe and filter and it has a set of components called filters connected by lines.</li> <li>Pipes are used to transmitting data from one component to the next.</li> <li>Each filter will work independently and is designed to take data input of a certain form and produces data output to the next filter of a specified form. The filters don\u2019t require any knowledge of the working of neighboring filters.</li> <li>If the data flow degenerates into a single line of transforms, then it is termed as batch sequential. This structure accepts the batch of data and then applies a series of sequential components to transform it.</li> </ul> <p>Advantages of Data Flow architecture</p> <ul> <li>It encourages upkeep, repurposing, and modification.</li> <li>With this design, concurrent execution is supported.</li> </ul> <p>The disadvantage of Data Flow architecture</p> <ul> <li>It frequently degenerates to batch sequential system</li> <li>Data flow architecture does not allow applications that require greater user engagement.</li> <li>It is not easy to coordinate two different but related streams</li> </ul> <p></p> <p>Data Flow architecture</p> <p>3] Call and Return architectures: It is used to create a program that is easy to scale and modify. Many sub-styles exist within this category. Two of them are explained below.</p> <ul> <li>Remote procedure call architecture: This components is used to present in a main program or sub program architecture distributed among multiple computers on a network.</li> <li>Main program or Subprogram architectures: The main program structure decomposes into number of subprograms or function into a control hierarchy. Main program contains number of subprograms that can invoke other components.</li> </ul> <p></p> <p>4] Object Oriented architecture: The components of a system encapsulate data and the operations that must be applied to manipulate the data. The coordination and communication between the components are established via the message passing.</p> <p>Characteristics of Object Oriented architecture</p> <ul> <li>Object protect the system\u2019s integrity.</li> <li>An object is unaware of the depiction of other items.</li> </ul> <p>Advantage of Object Oriented architecture</p> <ul> <li>It enables the designer to separate a challenge into a collection of autonomous objects.</li> <li>Other objects are aware of the implementation details of the object, allowing changes to be made without having an impact on other objects.</li> </ul> <p>5] Layered architecture:</p> <ul> <li>A number of different layers are defined with each layer performing a well-defined set of operations. Each layer will do some operations that becomes closer to machine instruction set progressively.</li> <li>At the outer layer, components will receive the user interface operations and at the inner layers, components will perform the operating system interfacing(communication and coordination with OS)</li> <li>Intermediate layers to utility services and application software functions.</li> <li>One common example of this architectural style is OSI-ISO (Open Systems Interconnection-International Organisation for Standardisation) communication system.</li> </ul> <p></p>"},{"location":"sepm/Unit3/#architectural-mapping-using-data-flow","title":"Architectural Mapping using Data Flow","text":"<p>A mapping technique, called structured design, is often characterized as a data flow-oriented design method because it provides a convenient transition from a data flow diagram to software architecture.</p> <ul> <li> <p>The transition from information flow to program structure is accomplished as part of a six step process:</p> </li> <li> <p>(1) The type of information flow is established,</p> </li> <li>(2) Flow boundaries are indicated,</li> <li>(3) The DFD is mapped into the program structure,</li> <li>(4) Control hierarchy is defined,</li> <li>(5) The resultant structure is refined using design measures.</li> <li> <p>(6) The architectural description is refined and elaborated.</p> </li> <li> <p>Example of data flow mapping, a step-by-step \u201ctransform\u201d mapping for a small part of the SafeHome security function.</p> </li> <li>In order to perform the mapping,</li> <li>The type of information flow must be determined. It is called transform flow and exhibits a linear quality.</li> <li>Data flows into the system along an incoming flow path where it is transformed from an external world representation into internalized form. Once it has been internalized, it is processed at a transform center.</li> <li>Finally, it flows out of the system along an outgoing flow path that transforms the data into external world form.</li> </ul>"},{"location":"sepm/Unit3/#user-interface-design","title":"User Interface Design","text":"<p>User interface is the front-end application view to which user interacts in order to use the software. The software becomes more popular if its user interface is:</p> <ul> <li>Attractive</li> <li>Simple to use</li> <li>Responsive in short time</li> <li>Clear to understand</li> <li>Consistent on all interface screens</li> </ul> <p>There are two types of User Interface:</p> <ol> <li>Command Line Interface: Command Line Interface provides a command prompt, where the user types the command and feeds to the system. The user needs to remember the syntax of the command and its use. eg Unix, MSDos.</li> <li>Graphical User Interface: Graphical User Interface provides the simple interactive interface to interact with the system. GUI can be a combination of both hardware and software. Using GUI, user interprets the software. eg Windows, Android.</li> </ol>"},{"location":"sepm/Unit3/#ui-design-principles","title":"UI Design Principles","text":"<p>Structure: Design should organize the user interface purposefully, in the meaningful and usual based on precise, consistent models that are apparent and recognizable to users, putting related things together and separating unrelated things, differentiating dissimilar things and making similar things resemble one another. The structure principle is concerned with overall user interface architecture.</p> <p>Simplicity: The design should make the simple, common task easy, communicating clearly and directly in the user's language, and providing good shortcuts that are meaningfully related to longer procedures.</p> <p>Visibility: The design should make all required options and materials for a given function visible without distracting the user with extraneous or redundant data.</p> <p>Feedback: The design should keep users informed of actions or interpretation, changes of state or condition, and bugs or exceptions that are relevant and of interest to the user through clear, concise, and unambiguous language familiar to users.</p> <p>Tolerance: The design should be flexible and tolerant, decreasing the cost of errors and misuse by allowing undoing and redoing while also preventing bugs wherever possible by tolerating varied inputs and sequences and by interpreting all reasonable actions.</p>"},{"location":"sepm/Unit3/#user-interface-golden-rules","title":"User Interface Golden rules","text":"<p>The following rules are mentioned to be the golden rules for GUI design, described by Shneiderman and Plaisant in their book (Designing the User Interface).</p> <ul> <li>Strive for consistency - Consistent sequences of actions should be required in similar situations. Identical terminology should be used in prompts, menus, and help screens. Consistent commands should be employed throughout.</li> <li>Enable frequent users to use short-cuts - The user\u2019s desire to reduce the number of interactions increases with the frequency of use. Abbreviations, function keys, hidden commands, and macro facilities are very helpful to an expert user.</li> <li>Offer informative feedback - For every operator action, there should be some system feedback. For frequent and minor actions, the response must be modest, while for infrequent and major actions, the response must be more substantial.</li> <li>Design dialog to yield closure - Sequences of actions should be organized into groups with a beginning, middle, and end. The informative feedback at the completion of a group of actions gives the operators the satisfaction of accomplishment, a sense of relief, the signal to drop contingency plans and options from their minds, and this indicates that the way ahead is clear to prepare for the next group of actions.</li> <li>Offer simple error handling - As much as possible, design the system so the user will not make a serious error. If an error is made, the system should be able to detect it and offer simple, comprehensible mechanisms for handling the error.</li> <li>Permit easy reversal of actions - This feature relieves anxiety, since the user knows that errors can be undone. Easy reversal of actions encourages exploration of unfamiliar options. The units of reversibility may be a single action, a data entry, or a complete group of actions.</li> <li>Support internal locus of control - Experienced operators strongly desire the sense that they are in charge of the system and that the system responds to their actions. Design the system to make users the initiators of actions rather than the responders.</li> <li>Reduce short-term memory load - The limitation of human information processing in short-term memory requires the displays to be kept simple, multiple page displays be consolidated, window-motion frequency be reduced, and sufficient training time be allotted for codes, mnemonics, and sequences of actions.</li> </ul>"},{"location":"sepm/Unit3/#component-level-design","title":"Component level Design","text":"<p>Component-based software engineering (CBSE) (also known as component-based development (CBD)) is a branch of software engineering that emphasizes the separation of concerns in respect of the wide-ranging functionality available throughout a given software system. It is a reuse-based approach to defining, implementing and composing loosely coupled independent components into systems. This practice aims to bring about an equally wide-ranging degree of benefits in both the short-term and the long-term for the software itself and for organizations that sponsor such software.</p> <p>Software engineering practitioners regard components as part of the starting platform for service-orientation. Components play this role, for example, in web services, and more recently, in service-oriented architectures (SOA), whereby a component is converted by the web service into a service and subsequently inherits further characteristics beyond that of an ordinary component.</p>"},{"location":"sepm/Unit3/#what-is-component-level-design","title":"What is Component Level Design?","text":"<ul> <li>A complete set of software components is defined during architectural design</li> <li>But the internal data structures and processing details of each component are not represented at a level of abstraction that is close to code</li> <li>Component-level design defines, the data structures algorithms, interface characteristics, and communication mechanisms allocated to each component</li> <li>A component-level design can be represented using some intermediate representation (e.g. graphical, tabular, or text-based) that can be translated into source code</li> <li>The design of data structures, interfaces, and algorithms should conform to well-established guidelines to help us avoid the introduction of errors</li> <li>A component communicates and collaborates with other components</li> </ul>"},{"location":"sepm/Unit3/#references","title":"References","text":"<ul> <li>https://www.geeksforgeeks.org/software-engineering-software-design-process/</li> <li>https://www.javatpoint.com/software-engineering-software-design</li> <li>https://www.brainkart.com/article/Design-Heuristic_9077/</li> <li>https://www.geeksforgeeks.org/software-engineering-architectural-design/</li> <li>-https://ecomputernotes.com/software-engineering/architecturaldesign</li> <li>http://softwareengineeringmca.blogspot.com/2017/07/architectural-mapping-using-data-flow-transform-mapping.html</li> <li>https://www.scribd.com/document/464837735/Architectural-mapping-using-Data-flow</li> <li>https://www.brainkart.com/article/Architectural-styles,-Architectural-Design,-Architectural-Mapping-using-Data-Flow_9079/</li> <li>https://www.geeksforgeeks.org/software-engineering-user-interface-design/</li> <li>https://www.javatpoint.com/software-engineering-user-interface-design</li> <li>https://www.tutorialspoint.com/software_architecture_design/component_based_architecture.htm</li> <li>https://www.tutorialspoint.com/software_engineering/software_user_interface_design.htm</li> <li>http://epgp.inflibnet.ac.in/epgpdata/uploads/epgp_content/S000007CS/P001067/M022567/ET/1504860540SE-MOD17-e-TEXT.pdf</li> <li>https://www.educative.io/answers/what-is-the-component-design</li> <li>https://cuitutorial.com/component-level-design/</li> </ul>"},{"location":"sepm/Unit4/","title":"Unit 4 : Testing &amp; Implementation","text":"<ul> <li>Software testing fundamentals</li> <li>Internal and external views of Testing</li> <li>White box testing (basis path testing, control structure testing)</li> <li>Black box testing</li> <li>Regression Testing</li> <li>Unit Testing</li> <li>Integration Testing</li> <li>Validation Testing</li> <li>System Testing and Debugging</li> <li>Software Implementation Techniques (Coding practices, Refactoring)</li> </ul>"},{"location":"sepm/Unit4/#software-testing-fundamentals","title":"Software Testing Fundamentals","text":"<p>Software testing can be stated as the process of verifying and validating whether a software or application is bug-free, meets the technical requirements as guided by its design and development, and meets the user requirements effectively and efficiently by handling all the exceptional and boundary cases.</p> <p>The process of software testing aims not only at finding faults in the existing software but also at finding measures to improve the software in terms of efficiency, accuracy, and usability. It mainly aims at measuring the specification, functionality, and performance of a software program or application.</p> <p>Software testing can be divided into two steps:</p> <ol> <li> <p>Verification: it refers to the set of tasks that ensure that the software correctly implements a specific function.</p> </li> <li> <p>Validation: it refers to a different set of tasks that ensure that the software that has been built is traceable to customer requirements.</p> </li> </ol> <p>Verification: \u201cAre we building the product right?\u201d Validation: \u201cAre we building the right product?\u201d</p>"},{"location":"sepm/Unit4/#software-testing-can-be-broadly-classified-into-two-types","title":"Software Testing can be broadly classified into two types:","text":"<ol> <li>Manual Testing: Manual testing includes testing software manually, i.e., without using any automation tool or any script. In this type, the tester takes over the role of an end-user and tests the software to identify any unexpected behavior or bug. There are different stages for manual testing such as unit testing, integration testing, system testing, and user acceptance testing.</li> </ol> <p>Testers use test plans, test cases, or test scenarios to test software to ensure the completeness of testing. Manual testing also includes exploratory testing, as testers explore the software to identify errors in it.</p> <ol> <li>Automation Testing: Automation testing, which is also known as Test Automation, is when the tester writes scripts and uses another software to test the product. This process involves the automation of a manual process. Automation Testing is used to re-run the test scenarios quickly and repeatedly, that were performed manually in manual testing.</li> </ol> <p>Apart from regression testing, automation testing is also used to test the application from a load, performance, and stress point of view. It increases the test coverage, improves accuracy, and saves time and money when compared to manual testing.</p>"},{"location":"sepm/Unit4/#different-software-testing-techniques","title":"Different Software Testing Techniques","text":"<p>Software testing techniques can be majorly classified into two categories:</p> <ol> <li> <p>Black Box Testing: The technique of testing in which the tester doesn\u2019t have access to the source code of the software and is conducted at the software interface without any concern with the internal logical structure of the software is known as black-box testing.</p> </li> <li> <p>White-Box Testing: The technique of testing in which the tester is aware of the internal workings of the product, has access to its source code, and is conducted by making sure that all internal operations are performed according to the specifications is known as white box testing.</p> </li> </ol> Aspect Black Box Testing White Box Testing Knowledge of Internal Workings Not Required Knowledge of Internal Workings is a Must Also Known As Closed Box / Data-Driven Testing Clear Box / Structural Testing Typical Participants End Users, Testers, and Developers Primarily Testers and Developers Testing Approach Trial and Error Method Analyzes Data Domains and Internal Boundaries Focus on Application's Functionalities Yes Yes (in addition to internal structures) Code-Level Testing No Yes Testing Strategy Tests based on Requirements and Inputs Tests based on Code Structure and Logic Testing Timeframe Mostly at the End of Development Throughout Development Lifecycle Finding Hidden Issues Limited due to Lack of Code Knowledge Better Suited for Finding Hidden Issues Design and Code Improvement Less Influence Can Contribute to Design and Code Improvement"},{"location":"sepm/Unit4/#levels-of-software-testing","title":"Levels of Software Testing","text":"<p>Software level testing can be majorly classified into 4 levels:</p> <ol> <li> <p>Unit Testing: A level of the software testing process where individual units/components of a software/system are tested. The purpose is to validate that each unit of the software performs as designed.</p> </li> <li> <p>Integration Testing: A level of the software testing process where individual units are combined and tested as a group. The purpose of this level of testing is to expose faults in the interaction between integrated units.</p> </li> <li> <p>System Testing: A level of the software testing process where a complete, integrated system/software is tested. The purpose of this test is to evaluate the system\u2019s compliance with the specified requirements.</p> </li> <li> <p>Acceptance Testing: A level of the software testing process where a system is tested for acceptability. The purpose of this test is to evaluate the system\u2019s compliance with the business requirements and assess whether it is acceptable for delivery.</p> </li> </ol>"},{"location":"sepm/Unit4/#internal-external-testing","title":"Internal &amp; External Testing","text":""},{"location":"sepm/Unit4/#internal-testing","title":"INTERNAL TESTING","text":"<p>The main advantage of such type of testing is the ability to control the whole process and to address issues at once.</p> <p>The main disadvantage is that in-house testing is much more expensive than outsourced one. (There are hideaway spending: expenses on hiring, training people and supporting the full-time team even if you do not need its service at the moment).</p> <p>\u2022 Continuously working on the same application is a monotonous activity, so the team loses the ability to think out of the box and the probability of finding bugs is reduced.</p>"},{"location":"sepm/Unit4/#external-testing","title":"EXTERNAL TESTING","text":"<p>The main advantage is that external testing will help you to reduce your costs.</p> <p>Also:</p> <p>\u2022 External testing provides you with certified, experienced specialists round the clock.</p> <p>\u2022 Flexibility (the team size can be changed, based on the customer requirements).</p> <p>\u2022 Prices on outsourced testing are reasonable.</p> <p>\u2022 Fresh eyes (independent testers are focused on finding bugs, while in-house team are focused on fulfilling the requirements)</p> <p>\u2022 At any point in time, an external tester knows \"how many scenarios for a particular functionality have been executed?\" whereas internal testers are just solely relying on test cases. Apart from this, external testers get a relatively stable product to test. Thanks to the internal testing team. So, they can focus on what they are targeting to test. There are hardly any distractions because of which they can lose focus.</p>"},{"location":"sepm/Unit4/#white-box-testing","title":"White Box Testing","text":"<p>The box testing approach of software testing consists of black box testing and white box testing. We are discussing here white box testing which also known as glass box is testing, structural testing, clear box testing, open box testing and transparent box testing. It tests internal coding and infrastructure of a software focus on checking of predefined inputs against expected and desired outputs. It is based on inner workings of an application and revolves around internal structure testing. In this type of testing programming skills are required to design test cases. The primary goal of white box testing is to focus on the flow of inputs and outputs through the software and strengthening the security of the software.</p> <p>The term 'white box' is used because of the internal perspective of the system. The clear box or white box or transparent box name denote the ability to see through the software's outer shell into its inner workings.</p> <p>The white box testing contains various tests, which are as follows:</p> <ul> <li>Path testing</li> <li>Loop testing</li> <li>Condition testing</li> <li>Testing based on the memory perspective</li> <li>Test performance of the program</li> </ul>"},{"location":"sepm/Unit4/#path-testing","title":"Path testing","text":"<p>In the path testing, we will write the flow graphs and test all independent paths. Here writing the flow graph implies that flow graphs are representing the flow of the program and also show how every program is added with one another</p>"},{"location":"sepm/Unit4/#loop-testing","title":"Loop testing","text":"<p>In the loop testing, we will test the loops such as while, for, and do-while, etc. and also check for ending condition if working correctly and if the size of the conditions is enough.</p>"},{"location":"sepm/Unit4/#condition-testing","title":"Condition testing","text":"<p>In this, we will test all logical conditions for both true and false values; that is, we will verify for both if and else condition.</p>"},{"location":"sepm/Unit4/#testing-based-on-the-memory-size-perspective","title":"Testing based on the memory (size) perspective","text":"<p>The size of the code is increasing for the following reasons:</p> <ul> <li>The reuse of code is not there: let us take one example, where we have four programs of the same application, and the first ten lines of the program are similar. We can write these ten lines as a discrete function, and it should be accessible by the above four programs as well. And also, if any bug is there, we can modify the line of code in the function rather than the entire code.</li> <li>The developers use the logic that might be modified. If one programmer writes code and the file size is up to 250kb, then another programmer could write a similar code using the different logic, and the file size is up to 100kb.</li> <li>The developer declares so many functions and variables that might never be used in any portion of the code. Therefore, the size of the program will increase.</li> </ul>"},{"location":"sepm/Unit4/#test-the-performance-speed-response-time-of-the-program","title":"Test the performance (Speed, response time) of the program","text":"<p>The application could be slow for the following reasons:</p> <ul> <li>When logic is used.</li> <li>For the conditional cases, we will use or &amp; and adequately.</li> <li>Switch case, which means we cannot use nested if, instead of using a switch case.</li> </ul>"},{"location":"sepm/Unit4/#black-box-testing","title":"Black box testing","text":"<p>Black box testing is a technique of software testing which examines the functionality of software without peering into its internal structure or coding. The primary source of black box testing is a specification of requirements that is stated by the customer.</p> <p>In this method, tester selects a function and gives input value to examine its functionality, and checks whether the function is giving expected output or not. If the function produces correct output, then it is passed in testing, otherwise failed. The test team reports the result to the development team and then tests the next function. After completing testing of all functions if there are severe problems, then it is given back to the development team for correction.</p>"},{"location":"sepm/Unit4/#generic-steps-of-black-box-testing","title":"Generic steps of black box testing","text":"<ul> <li>The black box test is based on the specification of requirements, so it is examined in the beginning.</li> <li>In the second step, the tester creates a positive test scenario and an adverse test scenario by selecting valid and invalid input values to check that the software is processing them correctly or incorrectly.</li> <li>In the third step, the tester develops various test cases such as decision table, all pairs test, equivalent division, error estimation, cause-effect graph, etc.</li> <li>The fourth phase includes the execution of all test cases.</li> <li>In the fifth step, the tester compares the expected output against the actual output.</li> <li>In the sixth and final step, if there is any flaw in the software, then it is cured and tested again.</li> </ul>"},{"location":"sepm/Unit4/#techniques-used-in-black-box-testing","title":"Techniques Used in Black Box Testing","text":"<p>Decision Table Technique</p> <p>Decision Table Technique is a systematic approach where various input combinations and their respective system behavior are captured in a tabular form. It is appropriate for the functions that have a logical relationship between two and more than two inputs.</p> <p>Boundary Value Technique</p> <p>Boundary Value Technique is used to test boundary values, boundary values are those that contain the upper and lower limit of a variable. It tests, while entering boundary value whether the software is producing correct output or not.</p> <p>State Transition Technique</p> <p>State Transition Technique is used to capture the behavior of the software application when different input values are given to the same function. This applies to those types of applications that provide the specific number of attempts to access the application.</p> <p>All-pair Testing Technique</p> <p>All-pair testing Technique is used to test all the possible discrete combinations of values. This combinational method is used for testing the application that uses checkbox input, radio button input, list box, text box, etc.</p> <p>Cause-Effect Technique</p> <p>Cause-Effect Technique underlines the relationship between a given result and all the factors affecting the result.It is based on a collection of requirements.</p>"},{"location":"sepm/Unit4/#regression-testing","title":"Regression Testing","text":"<p>Regression Testing is the process of testing the modified parts of the code and the parts that might get affected due to the modifications to ensure that no new errors have been introduced in the software after the modifications have been made. Regression means return of something and in the software field, it refers to the return of a bug.</p> <p>Process of Regression testing: Firstly, whenever we make some changes to the source code for any reasons like adding new functionality, optimization, etc. then our program when executed fails in the previously designed test suite for obvious reasons. After the failure, the source code is debugged in order to identify the bugs in the program. After identification of the bugs in the source code, appropriate modifications are made. Then appropriate test cases are selected from the already existing test suite which covers all the modified and affected parts of the source code. We can add new test cases if required. In the end regression testing is performed using the selected test cases.</p> <p></p> <p>Techniques for the selection of Test cases for Regression Testing:</p> <ul> <li>Select all test cases: In this technique, all the test cases are selected from the already existing test suite. It is the most simple and safest technique but not much efficient.</li> <li>Select test cases randomly: In this technique, test cases are selected randomly from the existing test-suite but it is only useful if all the test cases are equally good in their fault detection capability which is very rare. Hence, it is not used in most of the cases.</li> <li>Select modification traversing test cases: In this technique, only those test cases are selected which covers and tests the modified portions of the source code the parts which are affected by these modifications.</li> <li>Select higher priority test cases: In this technique, priority codes are assigned to each test case of the test suite based upon their bug detection capability, customer requirements, etc. After assigning the priority codes, test cases with highest priorities are selected for the process of regression testing.</li> </ul> <p>Tools for regression testing: In regression testing, we generally select the test cases from the existing test suite itself and hence, we need not to compute their expected output and it can be easily automated due to this reason. Automating the process of regression testing will be very much effective and time saving. Most commonly used tools for regression testing are:</p> <ul> <li>Selenium</li> <li>WATIR (Web Application Testing In Ruby)</li> <li>QTP (Quick Test Professional)</li> <li>RFT (Rational Functional Tester)</li> <li>Winrunner</li> <li>Silktest</li> </ul> <p>Advantages of Regression Testing:</p> <ul> <li>It ensures that no new bugs has been introduced after adding new functionalities to the system.</li> <li>As most of the test cases used in Regression Testing are selected from the existing test suite and we already know their expected outputs. Hence, it can be easily automated by the automated tools.</li> <li>It helps to maintain the quality of the source code.</li> </ul> <p>Disadvantages of Regression Testing:</p> <ul> <li>It can be time and resource consuming if automated tools are not used.</li> <li>It is required even after very small changes in the code.</li> </ul>"},{"location":"sepm/Unit4/#unit-testing","title":"Unit Testing","text":"<p>Unit testing involves the testing of each unit or an individual component of the software application. It is the first level of functional testing. The aim behind unit testing is to validate unit components with its performance.</p> <p>A unit is a single testable part of a software system and tested during the development phase of the application software.</p> <p>The purpose of unit testing is to test the correctness of isolated code. A unit component is an individual function or code of the application. White box testing approach used for unit testing and usually done by the developers.</p> <p>Whenever the application is ready and given to the Test engineer, he/she will start checking every component of the module or module of the application independently or one by one, and this process is known as Unit testing or components testing.</p>"},{"location":"sepm/Unit4/#objective-of-unit-testing","title":"Objective of Unit Testing:","text":"<p>The objective of Unit Testing is:</p> <ol> <li>To isolate a section of code.</li> <li>To verify the correctness of the code.</li> <li>To test every function and procedure.</li> <li>To fix bugs early in the development cycle and to save costs.</li> <li>To help the developers to understand the code base and enable them to make changes quickly.</li> <li>To help with code reuse.</li> </ol>"},{"location":"sepm/Unit4/#unit-testing-techniques","title":"Unit Testing Techniques:","text":"<p>There are 3 types of Unit Testing Techniques. They are</p> <ol> <li>Black Box Testing: This testing technique is used in covering the unit tests for input, user interface, and output parts.</li> <li>White Box Testing: This technique is used in testing the functional behavior of the system by giving the input and checking the functionality output including the internal design structure and code of the modules.</li> <li>Gray Box Testing: This technique is used in executing the relevant test cases, test methods, test functions, and analyzing the code performance for the modules.</li> </ol>"},{"location":"sepm/Unit4/#unit-testing-tools","title":"Unit Testing Tools:","text":"<p>Here are some commonly used Unit Testing tools:</p> <ol> <li>Jtest</li> <li>Junit</li> <li>NUnit</li> <li>EMMA</li> <li>PHPUnit</li> </ol>"},{"location":"sepm/Unit4/#advantages-of-unit-testing","title":"Advantages of Unit Testing:","text":"<ol> <li>Unit Testing allows developers to learn what functionality is provided by a unit and how to use it to gain a basic understanding of the unit API.</li> <li>Unit testing allows the programmer to refine code and make sure the module works properly.</li> <li>Unit testing enables testing parts of the project without waiting for others to be completed.</li> <li>Early Detection of Issues: Unit testing allows developers to detect and fix issues early in the development process, before they become larger and more difficult to fix.</li> <li>Improved Code Quality: Unit testing helps to ensure that each unit of code works as intended and meets the requirements, improving the overall quality of the software.</li> </ol>"},{"location":"sepm/Unit4/#disadvantages-of-unit-testing","title":"Disadvantages of Unit Testing:","text":"<ol> <li>The process is time-consuming for writing the unit test cases.</li> <li>Unit Testing will not cover all the errors in the module because there is a chance of having errors in the modules while doing integration testing.</li> <li>Unit Testing is not efficient for checking the errors in the UI(User Interface) part of the module.</li> <li>It requires more time for maintenance when the source code is changed frequently.</li> <li>It cannot cover the non-functional testing parameters such as scalability, the performance of the system, etc.</li> </ol>"},{"location":"sepm/Unit4/#integration-testing","title":"Integration Testing","text":"<p>Integration Testing is defined as a type of testing where software modules are integrated logically and tested as a group. A typical software project consists of multiple software modules, coded by different programmers. The purpose of this level of testing is to expose defects in the interaction between these software modules when they are integrated.</p> <p>There are four types of integration testing approaches. Those approaches are the following:</p> <p>1. Big-Bang Integration Testing \u2013 It is the simplest integration testing approach, where all the modules are combined and the functionality is verified after the completion of individual module testing.</p> <p>Advantages:</p> <ol> <li>It is convenient for small systems.</li> <li>Simple and straightforward approach.</li> <li>Can be completed quickly.</li> <li>Does not require a lot of planning or coordination.</li> <li>May be suitable for small systems or projects with a low degree of interdependence between components.</li> </ol> <p>Disadvantages:</p> <ol> <li>There will be quite a lot of delay because you would have to wait for all the modules to be integrated.</li> <li>High-risk critical modules are not isolated and tested on priority since all modules are tested at once.</li> <li>Not Good for long projects.</li> <li>High risk of integration problems that are difficult to identify and diagnose.</li> <li>This can result in long and complex debugging and troubleshooting efforts.     2. Bottom-Up Integration Testing \u2013 In bottom-up testing, each module at lower levels are tested with higher modules until all modules are tested. The primary purpose of this integration testing is that each subsystem tests the interfaces among various modules making up the subsystem. This integration testing uses test drivers to drive and pass appropriate data to the lower-level modules.</li> </ol> <p>Advantages:</p> <ul> <li>In bottom-up testing, no stubs are required.</li> <li>A principal advantage of this integration testing is that several disjoint subsystems can be tested simultaneously.</li> <li>It is easy to create the test conditions.</li> <li>Best for applications that uses bottom up design approach.</li> <li>It is Easy to observe the test results.</li> </ul> <p>Disadvantages:</p> <ul> <li>Driver modules must be produced.</li> <li>In this testing, the complexity that occurs when the system is made up of a large number of small subsystems.</li> <li>As Far modules have been created, there is no working model can be represented.</li> </ul> <p>3. Top-Down Integration Testing \u2013 Top-down integration testing technique is used in order to simulate the behaviour of the lower-level modules that are not yet integrated. In this integration testing, testing takes place from top to bottom. First, high-level modules are tested and then low-level modules and finally integrating the low-level modules to a high level to ensure the system is working as intended.</p> <p>Advantages:</p> <ul> <li>Separately debugged module.</li> <li>Few or no drivers needed.</li> <li>It is more stable and accurate at the aggregate level.</li> <li>Easier isolation of interface errors.</li> <li>In this, design defects can be found in the early stages.</li> </ul> <p>Disadvantages:</p> <ul> <li>Needs many Stubs.</li> <li>Modules at lower level are tested inadequately.</li> <li>It is difficult to observe the test output.</li> <li>It is difficult to stub design.</li> </ul> <p>4. Mixed Integration Testing \u2013 A mixed integration testing is also called sandwiched integration testing. A mixed integration testing follows a combination of top down and bottom-up testing approaches. In top-down approach, testing can start only after the top-level module have been coded and unit tested. In bottom-up approach, testing can start only after the bottom level modules are ready. This sandwich or mixed approach overcomes this shortcoming of the top-down and bottom-up approaches. It is also called the hybrid integration testing. also, stubs and drivers are used in mixed integration testing.</p> <p>Advantages:</p> <ul> <li>Mixed approach is useful for very large projects having several sub projects.</li> <li>This Sandwich approach overcomes this shortcoming of the top-down and bottom-up approaches.</li> <li>Parallel test can be performed in top and bottom layer tests.</li> </ul> <p>Disadvantages:</p> <ul> <li>For mixed integration testing, it requires very high cost because one part has a Top-down approach while another part has a bottom-up approach.</li> <li>This integration testing cannot be used for smaller systems with huge interdependence between different modules.</li> </ul>"},{"location":"sepm/Unit4/#applications","title":"Applications:","text":"<ol> <li>Identify the components: Identify the individual components of your application that need to be integrated. This could include the frontend, backend, database, and any third-party services.</li> <li>Create a test plan: Develop a test plan that outlines the scenarios and test cases that need to be executed to validate the integration points between the different components. This could include testing data flow, communication protocols, and error handling.</li> <li>Set up test environment: Set up a test environment that mirrors the production environment as closely as possible. This will help ensure that the results of your integration tests are accurate and reliable.</li> <li>Execute the tests: Execute the tests outlined in your test plan, starting with the most critical and complex scenarios. Be sure to log any defects or issues that you encounter during testing.</li> <li>Analyze the results: Analyze the results of your integration tests to identify any defects or issues that need to be addressed. This may involve working with developers to fix bugs or make changes to the application architecture.</li> </ol>"},{"location":"sepm/Unit4/#system-testing","title":"System Testing","text":"<p>System Testing includes testing of a fully integrated software system. Generally, a computer system is made with the integration of software (any software is only a single element of a computer system). The software is developed in units and then interfaced with other software and hardware to create a complete computer system. In other words, a computer system consists of a group of software to perform the various tasks, but only software cannot perform the task; for that software must be interfaced with compatible hardware.</p> <p>To check the end-to-end flow of an application or the software as a user is known as System testing. In this, we navigate (go through) all the necessary modules of an application and check if the end features or the end business works fine, and test the product as a whole system.</p> <p>System Testing Process: System Testing is performed in the following steps:</p> <ul> <li>Test Environment Setup: Create testing environment for the better quality testing.</li> <li>Create Test Case: Generate test case for the testing process.</li> <li>Create Test Data: Generate the data that is to be tested.</li> <li>Execute Test Case: After the generation of the test case and the test data, test cases are executed.</li> <li>Defect Reporting: Defects in the system are detected.</li> <li>Regression Testing: It is carried out to test the side effects of the testing process.</li> <li>Log Defects: Defects are fixed in this step.</li> <li> <p>Retest: If the test is not successful then again test is performed.   Types of System Testing:</p> </li> <li> <p>Performance Testing: Performance Testing is a type of software testing that is carried out to test the speed, scalability, stability and reliability of the software product or application.</p> </li> <li>Load Testing: Load Testing is a type of software Testing which is carried out to determine the behavior of a system or software product under extreme load.</li> <li>Stress Testing: Stress Testing is a type of software testing performed to check the robustness of the system under the varying loads.</li> <li>Scalability Testing: Scalability Testing is a type of software testing which is carried out to check the performance of a software application or system in terms of its capability to scale up or scale down the number of user request load.</li> </ul> <p>Tools used for System Testing :</p> <ol> <li>JMeter</li> <li>Gallen Framework</li> <li>Selenium</li> </ol>"},{"location":"sepm/Unit4/#here-are-some-advantages-of-system-testing","title":"Here are some advantages of System Testing:","text":"<ul> <li>Verifies the overall functionality of the system.</li> <li>Detects and identifies system-level problems early in the development cycle.</li> <li>Helps to validate the requirements and ensure the system meets the user needs.</li> <li>Improves system reliability and quality.</li> <li> <p>Facilitates collaboration and communication between development and testing teams.   Disadvantages of System Testing :</p> </li> <li> <p>This testing is time consuming process than another testing techniques since it checks the entire product or software.</p> </li> <li>The cost for the testing will be high since it covers the testing of entire software.</li> <li>It needs good debugging tool otherwise the hidden errors will not be found.</li> </ul>"},{"location":"sepm/Unit4/#verification-testing","title":"Verification testing","text":"<p>Verification testing includes different activities such as business requirements, system requirements, design review, and code walkthrough while developing a product.</p> <p>It is also known as static testing, where we are ensuring that \"we are developing the right product or not\". And it also checks that the developed application fulfilling all the requirements given by the client.</p> <p></p>"},{"location":"sepm/Unit4/#validation-testing","title":"Validation testing","text":"<p>Validation testing is testing where tester performed functional and non-functional testing. Here functional testing includes Unit Testing (UT), Integration Testing (IT) and System Testing (ST), and non-functional testing includes User acceptance testing (UAT).</p> <p>Validation testing is also known as dynamic testing, where we are ensuring that \"we have developed the product right.\" And it also checks that the software meets the business needs of the client.</p> <p></p>"},{"location":"sepm/Unit4/#note-verification-and-validation-process-are-done-under-the-v-model-of-the-software-development-life-cycle","title":"Note: Verification and Validation process are done under the V model of the software development life cycle.","text":"Feature Verification Validation Purpose To check whether we are developing the right product or not. To check whether the developed product is right. Type of testing Static testing Dynamic testing Methods used Inspections, reviews, walkthroughs Functional testing, system testing, integration testing, user acceptance testing When performed During the development cycle After the development cycle Who performs it Quality assurance team Testing team Code execution involved No Yes Bugs found Early in the development phase Later in the development phase or after deployment Role in quality control Quality assurance Quality control"},{"location":"sepm/Unit4/#software-implementation-techniques","title":"Software Implementation Techniques","text":"<p>A good system design is to organize the program modules in such a way that are easy to develop and change. Structured design techniques help developers to deal with the size and complexity of programs. Analysts create instructions for the developers about how code should be written and how pieces of code should fit together to form a program.</p> <p>Software Engineering is the process of designing, building, testing, and maintaining software. The goal of software engineering is to create software that is reliable, efficient, and easy to maintain. System design is a critical component of software engineering and involves making decisions about the architecture, components, modules, interfaces, and data for a software system.</p> <p>System Design Strategy refers to the approach that is taken to design a software system. There are several strategies that can be used to design software systems, including the following:</p> <ol> <li>Top-Down Design: This strategy starts with a high-level view of the system and gradually breaks it down into smaller, more manageable components.</li> <li>Bottom-Up Design: This strategy starts with individual components and builds the system up, piece by piece.</li> <li>Iterative Design: This strategy involves designing and implementing the system in stages, with each stage building on the results of the previous stage.</li> <li>Incremental Design: This strategy involves designing and implementing a small part of the system at a time, adding more functionality with each iteration.</li> <li>Agile Design: This strategy involves a flexible, iterative approach to design, where requirements and design evolve through collaboration between self-organizing and cross-functional teams.</li> </ol> <p>The choice of system design strategy will depend on the particular requirements of the software system, the size and complexity of the system, and the development methodology being used. A well-designed system can simplify the development process, improve the quality of the software, and make the software easier to maintain.</p> <p>Importance :</p> <ol> <li>If any pre-existing code needs to be understood, organized, and pieced together.</li> <li>It is common for the project team to have to write some code and produce original programs that support the application logic of the system.</li> </ol> <p>There are many strategies or techniques for performing system design. They are:</p> <ul> <li>Bottom-up approach:   The design starts with the lowest level components and subsystems. By using these components, the next immediate higher-level components and subsystems are created or composed. The process is continued till all the components and subsystems are composed into a single component, which is considered as the complete system. The amount of abstraction grows high as the design moves to more high levels.</li> </ul> <p>By using the basic information existing system, when a new system needs to be created, the bottom-up strategy suits the purpose.</p> <p></p> <p>Advantages:</p> <ul> <li>The economics can result when general solutions can be reused.</li> <li>It can be used to hide the low-level details of implementation and be merged with the top-down technique.</li> </ul> <p>Disadvantages:</p> <ul> <li>It is not so closely related to the structure of the problem.</li> <li>High-quality bottom-up solutions are very hard to construct.</li> <li>It leads to the proliferation of \u2018potentially useful\u2019 functions rather than the most appropriate ones.</li> </ul> <p>Top-down approach: Each system is divided into several subsystems and components. Each of the subsystems is further divided into a set of subsystems and components. This process of division facilitates forming a system hierarchy structure. The complete software system is considered a single entity and in relation to the characteristics, the system is split into sub-systems and components. The same is done with each of the sub-systems.</p> <p>This process is continued until the lowest level of the system is reached. The design is started initially by defining the system as a whole and then keeps on adding definitions of the subsystems and components. When all the definitions are combined together, it turns out to be a complete system.</p> <p>For the solutions of the software that need to be developed from the ground level, a top-down design best suits the purpose.</p> <p></p> <p>Advantages:</p> <ul> <li>The main advantage of the top-down approach is that its strong focus on requirements helps to make a design responsive according to its requirements.</li> </ul> <p>Disadvantages:</p> <ul> <li>Project and system boundaries tend to be application specification-oriented. Thus it is more likely that the advantages of component reuse will be missed.</li> <li>The system is likely to miss, the benefits of a well-structured, simple architecture.</li> <li>Hybrid Design:   It is a combination of both top-down and bottom-up design strategies. In this, we can reuse the modules.</li> </ul> <p>Advantages of using a System Design Strategy:</p> <ol> <li>Improved quality: A well-designed system can improve the overall quality of the software, as it provides a clear and organized structure for the software.</li> <li>Ease of maintenance: A well-designed system can make it easier to maintain and update the software, as the design provides a clear and organized structure for the software.</li> <li>Improved efficiency: A well-designed system can make the software more efficient, as it provides a clear and organized structure for the software that reduces the complexity of the code.</li> <li>Better communication: A well-designed system can improve communication between stakeholders, as it provides a clear and organized structure for the software that makes it easier for stakeholders to understand and agree on the design of the software.</li> <li>Faster development: A well-designed system can speed up the development process, as it provides a clear and organized structure for the software that makes it easier for developers to understand the requirements and implement the software.</li> </ol>"},{"location":"sepm/Unit4/#disadvantages-of-using-a-system-design-strategy","title":"Disadvantages of using a System Design Strategy:","text":"<ol> <li>Time-consuming: Designing a system can be time-consuming, especially for large and complex systems, as it requires a significant amount of documentation and analysis.</li> <li>Inflexibility: Once a system has been designed, it can be difficult to make changes to the design, as the process is often highly structured and documentation-intensive.</li> </ol>"},{"location":"sepm/Unit4/#references","title":"References","text":"<ul> <li>https://www.javatpoint.com/white-box-testing</li> <li>https://www.javatpoint.com/black-box-testing</li> <li>https://www.geeksforgeeks.org/software-engineering-regression-testing/</li> <li>https://www.browserstack.com/guide/regression-testing</li> <li>https://www.javatpoint.com/unit-testing</li> <li>https://www.geeksforgeeks.org/unit-testing-software-testing/</li> <li>https://www.geeksforgeeks.org/software-engineering-integration-testing/?ref=lbp</li> <li>https://www.guru99.com/integration-testing.html</li> <li>https://www.geeksforgeeks.org/system-testing/?ref=lbp</li> <li>https://www.javatpoint.com/system-testing</li> <li>https://www.javatpoint.com/verification-and-validation-testing</li> <li>https://www.geeksforgeeks.org/software-engineering-system-design-strategy/</li> <li>https://www.brainkart.com/article/Internal-and-external-views-of-Testing_9085/</li> <li>https://www.linkedin.com/pulse/external-vs-internal-testing-mariya-novikava</li> <li>https://www.scaler.com/topics/fundamentals-of-software-testing/</li> <li>https://www.geeksforgeeks.org/software-testing-basics/</li> </ul>"}]}